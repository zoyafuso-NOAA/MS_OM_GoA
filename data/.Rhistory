Extrapolation_List$Data_Extrap$DEPTH[idxs] = -bathymap$z[bathy_idx[idxs,k]]
neg_depths = sum(Extrapolation_List$Data_Extrap$DEPTH <=0)
k = k + 1
}
k
library(marmap); library(sp); library(RANN); library(raster)
?raster
rasterize(x = Extrapolation_List$Data_Extrap[,c('E_km', 'N_km')],
field = Extrapolation_List$Data_Extrap$DEPTH)
test = rasterize(x = as.matrix(Extrapolation_List$Data_Extrap[,c('E_km', 'N_km')]),
field = Extrapolation_List$Data_Extrap$DEPTH)
?rasterize
as.matrix(Extrapolation_List$Data_Extrap[,c('E_km', 'N_km')])
?raster
test = raster::rasterize(x = as.matrix(Extrapolation_List$Data_Extrap[,c('E_km', 'N_km')]),
y = raster(nrows=100, ncols=100,
xmn=xmin, xmx=xmax, ymn=ymin, ymx=ymax,
crs, ext, resolution, vals=NULL)
field = Extrapolation_List$Data_Extrap$DEPTH)
test = raster::rasterize(x = as.matrix(Extrapolation_List$Data_Extrap[,c('E_km', 'N_km')]),
y = raster(nrows=100, ncols=100,
xmn=xmin, xmx=xmax, ymn=ymin, ymx=ymax,
crs = CRS("+proj=utm +zone=5N"), ext, resolution),
field = Extrapolation_List$Data_Extrap$DEPTH)
test = raster::rasterize(x = as.matrix(Extrapolation_List$Data_Extrap[,c('E_km', 'N_km')]),
y = raster(nrows=100, ncols=100,
xmn=xmin, xmx=xmax, ymn=ymin, ymx=ymax,
crs = CRS("+proj=utm +zone=5N"), resolution),
field = Extrapolation_List$Data_Extrap$DEPTH)
ymax
ymin
xmax
xmin
test = raster::rasterize(x = as.matrix(Extrapolation_List$Data_Extrap[,c('E_km', 'N_km')]),
y = raster(nrows=100, ncols=100,
xmn=xmin, xmx=xmax, ymn=ymin, ymx=ymax,
crs = CRS("+proj=utm +zone=5N")),
field = Extrapolation_List$Data_Extrap$DEPTH)
plot(test)
Extrapolation_List$Data_Extrap$DEPTH
test
test = raster::rasterize(
x = as.matrix(Extrapolation_List$Data_Extrap[,c('E_km', 'N_km')]),
y = raster(nrows=100, ncols=100,
xmn=min(Extrapolation_List$Data_Extrap$E_km),
xmx=max(Extrapolation_List$Data_Extrap$E_km),
ymn=min(Extrapolation_List$Data_Extrap$N_km),
ymx=max(Extrapolation_List$Data_Extrap$N_km),
crs = CRS("+proj=utm +zone=5N")),
field = Extrapolation_List$Data_Extrap$DEPTH)
test
plot(test)
test = raster::rasterize(
x = as.matrix(Extrapolation_List$Data_Extrap[,c('E_km', 'N_km')]),
y = raster(nrows=200, ncols=100,
xmn=min(Extrapolation_List$Data_Extrap$E_km),
xmx=max(Extrapolation_List$Data_Extrap$E_km),
ymn=min(Extrapolation_List$Data_Extrap$N_km),
ymx=max(Extrapolation_List$Data_Extrap$N_km),
crs = CRS("+proj=utm +zone=5N")),
field = Extrapolation_List$Data_Extrap$DEPTH)
test
test = raster::rasterize(
x = as.matrix(Extrapolation_List$Data_Extrap[,c('E_km', 'N_km')]),
y = raster(nrows=100, ncols=200,
xmn=min(Extrapolation_List$Data_Extrap$E_km),
xmx=max(Extrapolation_List$Data_Extrap$E_km),
ymn=min(Extrapolation_List$Data_Extrap$N_km),
ymx=max(Extrapolation_List$Data_Extrap$N_km),
crs = CRS("+proj=utm +zone=5N")),
field = Extrapolation_List$Data_Extrap$DEPTH)
test
test = raster::rasterize(
x = as.matrix(Extrapolation_List$Data_Extrap[,c('E_km', 'N_km')]),
y = raster(nrows=100, ncols=250,
xmn=min(Extrapolation_List$Data_Extrap$E_km),
xmx=max(Extrapolation_List$Data_Extrap$E_km),
ymn=min(Extrapolation_List$Data_Extrap$N_km),
ymx=max(Extrapolation_List$Data_Extrap$N_km),
crs = CRS("+proj=utm +zone=5N")),
field = Extrapolation_List$Data_Extrap$DEPTH)
test
test = raster::rasterize(
x = as.matrix(Extrapolation_List$Data_Extrap[,c('E_km', 'N_km')]),
y = raster(nrows=100, ncols=300,
xmn=min(Extrapolation_List$Data_Extrap$E_km),
xmx=max(Extrapolation_List$Data_Extrap$E_km),
ymn=min(Extrapolation_List$Data_Extrap$N_km),
ymx=max(Extrapolation_List$Data_Extrap$N_km),
crs = CRS("+proj=utm +zone=5N")),
field = Extrapolation_List$Data_Extrap$DEPTH)
test
test = raster::rasterize(
x = as.matrix(Extrapolation_List$Data_Extrap[,c('E_km', 'N_km')]),
y = raster(nrows=100, ncols=350,
xmn=min(Extrapolation_List$Data_Extrap$E_km),
xmx=max(Extrapolation_List$Data_Extrap$E_km),
ymn=min(Extrapolation_List$Data_Extrap$N_km),
ymx=max(Extrapolation_List$Data_Extrap$N_km),
crs = CRS("+proj=utm +zone=5N")),
field = Extrapolation_List$Data_Extrap$DEPTH)
test
test = raster::rasterize(
x = as.matrix(Extrapolation_List$Data_Extrap[,c('E_km', 'N_km')]),
y = raster(nrows=100, ncols=340,
xmn=min(Extrapolation_List$Data_Extrap$E_km),
xmx=max(Extrapolation_List$Data_Extrap$E_km),
ymn=min(Extrapolation_List$Data_Extrap$N_km),
ymx=max(Extrapolation_List$Data_Extrap$N_km),
crs = CRS("+proj=utm +zone=5N")),
field = Extrapolation_List$Data_Extrap$DEPTH)
test
test = raster::rasterize(
x = as.matrix(Extrapolation_List$Data_Extrap[,c('E_km', 'N_km')]),
y = raster(nrows=100, ncols=320,
xmn=min(Extrapolation_List$Data_Extrap$E_km),
xmx=max(Extrapolation_List$Data_Extrap$E_km),
ymn=min(Extrapolation_List$Data_Extrap$N_km),
ymx=max(Extrapolation_List$Data_Extrap$N_km),
crs = CRS("+proj=utm +zone=5N")),
field = Extrapolation_List$Data_Extrap$DEPTH)
test
plot(test)
range(Extrapolation_List$Data_Extrap$Lat)
range(Extrapolation_List$Data_Extrap$Lon)
xmin <- -170
xmax <- -132
ymin <- 52
ymax <- 60.5
bathymap <- getNOAA.bathy(lon1 = xmin, lon2 = xmax,
lat1 = ymin, lat2 = ymax,
resolution = 1)
bathymap <- fortify.bathy(bathymap)
#####################
## Turn latlon to UTM for distances
#####################
bathymap_coord = sp::SpatialPoints(coords = bathymap[,c('x', 'y')],
proj4string = CRS('+proj=longlat') )
cord.UTM <- sp::spTransform(bathymap_coord, CRS("+proj=utm +zone=5N"))
bathymap[,c('E_km', 'N_km')] = cord.UTM@coords / 1000
bathy_idx = RANN::nn2(query=Extrapolation_List$Data_Extrap[,c('E_km','N_km')],
data = bathymap[,c('E_km', 'N_km')],
k = 300)$nn.idx
Extrapolation_List$Data_Extrap$DEPTH = -bathymap$z[bathy_idx[,1]]
plot(Extrapolation_List$Data_Extrap[,c('E_km', 'N_km')], pch = '.')
points(Extrapolation_List$Data_Extrap[Extrapolation_List$Data_Extrap$DEPTH <=0,c('E_km', 'N_km')], pch = 16, col = 'red')
neg_depths = sum(Extrapolation_List$Data_Extrap$DEPTH <=0)
k = 2
while(neg_depths != 0){
idxs = which(Extrapolation_List$Data_Extrap$DEPTH <= 0)
Extrapolation_List$Data_Extrap$DEPTH[idxs] = -bathymap$z[bathy_idx[idxs,k]]
neg_depths = sum(Extrapolation_List$Data_Extrap$DEPTH <=0)
k = k + 1
}
test = raster::rasterize(
x = as.matrix(Extrapolation_List$Data_Extrap[,c('E_km', 'N_km')]),
y = raster(nrows=100, ncols=320,
xmn=min(Extrapolation_List$Data_Extrap$E_km),
xmx=max(Extrapolation_List$Data_Extrap$E_km),
ymn=min(Extrapolation_List$Data_Extrap$N_km),
ymx=max(Extrapolation_List$Data_Extrap$N_km),
crs = CRS("+proj=utm +zone=5N")),
field = Extrapolation_List$Data_Extrap$DEPTH)
plot(test)
plot(test, col = heat.colors(100))
plot(test, col = rev(heat.colors(100)))
plot(test)
plot(test, axes = F)
library(marmap); library(sp); library(RANN); library(raster); library(maps)
install.packages('maps')
library(marmap); library(sp); library(RANN); library(raster); library(maps)
plot(map_data('world2'))
?maps::map
plot(map('world2'))
plot(map('usa'))
plot(map('AK'))
plot(map('Alaska'))
plot(map('AlaskaMapEnv'))
map(map('AlaskaMapEnv'))
map(map('USA'))
map('USA')
lines(map('USA'))
map('state', region = c('new york', 'new jersey', 'penn'))
map('state', region = c('new york', 'new jersey', 'penn'))
map('state', region = c('alaska'))
data(unemp)
unemp
map('unemp')
map('county', 'iowa', fill = TRUE, col = palette())
map('county', 'alaska', fill = TRUE, col = palette())
map('unemp', 'alaska', fill = TRUE, col = palette())
install.packages('usmap')
library(marmap); library(sp); library(RANN); library(raster); library(usmap)
plot_usmap(regions = 'state', include 'AK')
plot_usmap(regions = 'state', include = 'AK')
plot(test, axes = F)
plot_usmap(regions = 'state', include = 'AK', add = T)
plot(test, axes = F, add = T)
?plot_usmap
#Plot Bathyetry Field
test = raster::rasterize(
x = Extrapolation_List$Data_Extrap[,c('E_km', 'N_km')],
y = raster(nrows=100, ncols=320,
xmn=min(Extrapolation_List$Data_Extrap$E_km),
xmx=max(Extrapolation_List$Data_Extrap$E_km),
ymn=min(Extrapolation_List$Data_Extrap$N_km),
ymx=max(Extrapolation_List$Data_Extrap$N_km),
crs = CRS("+proj=utm +zone=5N")),
field = Extrapolation_List$Data_Extrap$DEPTH)
plot(test, axes = F, add = T)
#Plot Bathyetry Field
test = raster::rasterize(
x = Extrapolation_List$Data_Extrap[,c('E_km', 'N_km')],
y = raster(nrows=100, ncols=320,
xmn=min(Extrapolation_List$Data_Extrap$E_km),
xmx=max(Extrapolation_List$Data_Extrap$E_km),
ymn=min(Extrapolation_List$Data_Extrap$N_km),
ymx=max(Extrapolation_List$Data_Extrap$N_km),
crs = CRS("+proj=utm +zone=5N")),
field = Extrapolation_List$Data_Extrap$DEPTH)
plot(test, axes = F, add = T)
plot(test, axes = F)
#Plot Bathyetry Field
test = raster::rasterize(
x = Extrapolation_List$Data_Extrap[,c('E_km', 'N_km')],
y = raster(nrows=100, ncols=320,
xmn=min(Extrapolation_List$Data_Extrap$E_km),
xmx=max(Extrapolation_List$Data_Extrap$E_km),
ymn=min(Extrapolation_List$Data_Extrap$N_km),
ymx=max(Extrapolation_List$Data_Extrap$N_km),
crs = CRS("+proj=utm +zone=5N")),
field = Extrapolation_List$Data_Extrap$DEPTH)
plot(test, axes = F)
library(rgdal)
readOGR('/Users/zackoyafuso/Downloads/AKmaps_bathy/simplenmfs.shp')
test = readOGR('/Users/zackoyafuso/Downloads/AKmaps_bathy/simplenmfs.shp')
test
plot(Test)
plot(Test)
plot(test)
test$Area
test$REP_AREA
library(marmap); library(sp); library(RANN); library(raster);
setwd("/Users/zackoyafuso/Documents/GitHub/MS_OM_GoA/data/")
load('Spatial_Settings.RData')
xmin <- -170
xmax <- -132
ymin <- 52
ymax <- 60.5
bathymap <- getNOAA.bathy(lon1 = xmin, lon2 = xmax,
lat1 = ymin, lat2 = ymax,
resolution = 1)
bathymap <- fortify.bathy(bathymap)
#####################
## Turn latlon to UTM for distances
#####################
bathymap_coord = sp::SpatialPoints(coords = bathymap[,c('x', 'y')],
proj4string = CRS('+proj=longlat') )
cord.UTM <- sp::spTransform(bathymap_coord, CRS("+proj=utm +zone=5N"))
bathymap[,c('E_km', 'N_km')] = cord.UTM@coords / 1000
#####################
bathy_idx = RANN::nn2(query=Extrapolation_List$Data_Extrap[,c('E_km','N_km')],
data = bathymap[,c('E_km', 'N_km')],
k = 300)$nn.idx
Extrapolation_List$Data_Extrap$DEPTH = -bathymap$z[bathy_idx[,1]]
plot(Extrapolation_List$Data_Extrap[,c('E_km', 'N_km')], pch = '.')
points(Extrapolation_List$Data_Extrap[Extrapolation_List$Data_Extrap$DEPTH <=0,c('E_km', 'N_km')], pch = 16, col = 'red')
neg_depths = sum(Extrapolation_List$Data_Extrap$DEPTH <=0)
k = 2
while(neg_depths != 0){
idxs = which(Extrapolation_List$Data_Extrap$DEPTH <= 0)
Extrapolation_List$Data_Extrap$DEPTH[idxs] = -bathymap$z[bathy_idx[idxs,k]]
neg_depths = sum(Extrapolation_List$Data_Extrap$DEPTH <=0)
k = k + 1
}
#Plot Bathyetry Field
test = raster::rasterize(
x = Extrapolation_List$Data_Extrap[,c('E_km', 'N_km')],
y = raster(nrows=100, ncols=320,
xmn=min(Extrapolation_List$Data_Extrap$E_km),
xmx=max(Extrapolation_List$Data_Extrap$E_km),
ymn=min(Extrapolation_List$Data_Extrap$N_km),
ymx=max(Extrapolation_List$Data_Extrap$N_km),
crs = CRS("+proj=utm +zone=5N")),
field = Extrapolation_List$Data_Extrap$DEPTH)
plot(test, axes = F)
library(rgdal)
test2 = readOGR('/Users/zackoyafuso/Downloads/AKmaps_bathy/simplenmfs.shp')
test2
plot(test2, add = T)
test2
test2@data
test2@bbox
test2 = spTransform(x = test2, CRSobj = CRS("+proj=utm +zone=5N"))
plot(test2, add = T)
test2
test2@bbox
test
#Plot Bathyetry Field
test = raster::rasterize(
x = Extrapolation_List$Data_Extrap[,c('E_km', 'N_km')],
y = raster(nrows=100, ncols=320,
xmn=min(Extrapolation_List$Data_Extrap$E_km)* 1000,
xmx=max(Extrapolation_List$Data_Extrap$E_km)* 1000,
ymn=min(Extrapolation_List$Data_Extrap$N_km)* 1000,
ymx=max(Extrapolation_List$Data_Extrap$N_km)* 1000,
crs = CRS("+proj=utm +zone=5N")),
field = Extrapolation_List$Data_Extrap$DEPTH)
plot(test, axes = F)
test
min(Extrapolation_List$Data_Extrap$E_km)* 1000
#Plot Bathyetry Field
test = raster::rasterize(
x = Extrapolation_List$Data_Extrap[,c('E_km', 'N_km')]*1000,
y = raster(nrows=100, ncols=320,
xmn=min(Extrapolation_List$Data_Extrap$E_km)* 1000,
xmx=max(Extrapolation_List$Data_Extrap$E_km)* 1000,
ymn=min(Extrapolation_List$Data_Extrap$N_km)* 1000,
ymx=max(Extrapolation_List$Data_Extrap$N_km)* 1000,
crs = CRS("+proj=utm +zone=5N")),
field = Extrapolation_List$Data_Extrap$DEPTH)
plot(test, axes = F)
library(rgdal)
test2 = readOGR('/Users/zackoyafuso/Downloads/AKmaps_bathy/simplenmfs.shp')
test2 = spTransform(x = test2, CRSobj = CRS("+proj=utm +zone=5N"))
plot(test2, add = T)
plot(test2[1,], add = T)
plot(test, axes = F)
test2 = spTransform(x = test2, CRSobj = CRS("+proj=utm +zone=5N"))
plot(test2[1,], add = T)
test2 = readOGR('/Users/zackoyafuso/Downloads/AKmaps_bathy/simplenmfs.shp')
test2 = spTransform(x = test2, CRSobj = CRS("+proj=utm +zone=5N"))
plot(test, axes = F)
plot(test2[2,], add = T)
plot(test2[3,], add = T)
plot(test2[4,], add = T)
plot(test2[5,], add = T)
plot(test2[6,], add = T)
plot(test2[7,], add = T)
plot(test2[8,], add = T)
plot(test, axes = F)
plot(test2[6,], add = T)
library(tidyverse)
install.packages()
install.packages('tidyverse')
install.packages("tidyverse")
library(tidyverse)
library(maps)
library(PBSmapping)
library(marmap)
library(rgdal)
library(raster)   ## To convert an "Extent" object to a "SpatialPolygons" object.
library(rgeos)
library(tidyverse)
library(maps)
library(PBSmapping)
install.packages('PBSmapping')
library(PBSmapping)
library(marmap)
library(rgdal)
library(raster)   ## To convert an "Extent" object to a "SpatialPolygons" object.
library(rgeos)
#  Create map boundaries
xmin <- 160
xmax <- 230
ymin <- 47
ymax <- 69
myworld <- map_data("world2")
names(myworld) <- c("X","Y","PID","POS","region","subregion")
#  You can learn more about clipPolys via ?clipPolys. We need to specify our x and y boundaries so that it can clip the dataset.
myworld <- clipPolys(myworld, xlim=c(xmin,xmax),ylim=c(ymin,ymax), keepExtra=TRUE)
# load nmfs area polygons, note that this has same exclusion of SE AK inshore...
# could use extent of simplenmfs as clipping polygon or maybe state stat areas instead?
simplenmfs <- readOGR(dsn="C:/Users/lewis.barnett/Work/AFSC/Data/AKmaps_bathy",layer="simplenmfs")
# load nmfs area polygons, note that this has same exclusion of SE AK inshore...
# could use extent of simplenmfs as clipping polygon or maybe state stat areas instead?
simplenmfs <- readOGR(dsn="/Users/zackoyafuso/Downloads/AKmaps_bathy/",layer="simplenmfs")
## Create the clipping polygon
CP <- as(extent(xmin, xmax, ymin, ymax), "SpatialPolygons")
#  Match the projections
proj4string(CP) <- CRS(proj4string(simplenmfs))
## Clip the map and convert to a data frame
out <- gIntersection(simplenmfs, CP, byid=TRUE) %>%
fortify() %>%
mutate(long=long-360)
mymap1 <- getNOAA.bathy(lon1 = 160, lon2 = 180, lat1 = ymin, lat2 = ymax, resolution = 5)
mymap2 <- getNOAA.bathy(lon1 = -180, lon2 = -130, lat1 = ymin, lat2 = ymax, resolution = 5)
#  Get the bathymetry on the same scale as the shapefile and map.
temp <- fortify.bathy(mymap2)
temp$x[temp$x<0] <- temp$x[temp$x<0] + 360
newmap <- bind_rows(fortify.bathy(mymap1),temp)
newmap$x <- newmap$x-360
newmap <- as.bathy(newmap)
myworld$X <- myworld$X-360
x11();autoplot(newmap,geom=c("raster"),coast=FALSE)+
geom_polygon(data=myworld,aes(x=X,y=Y,group=factor(PID))) +
geom_polygon(data=out,aes(long,lat,group=group),fill=NA,color="black") +
theme_bw() +
scale_fill_continuous(guide = FALSE)
myworld
temp
##################################
## Assign bathymetry value to each extrapolation grid
## Gulf of Alaska
#################################
setwd("/Users/zackoyafuso/Documents/GitHub/MS_OM_GoA/data/")
##################################
## Import Libraries
#################################
library(marmap); library(sp); library(RANN); library(raster);
##################################
## Load Extrapolation Grid used in VAST
#################################
load('Spatial_Settings.RData')
##################################
## Extract fine-scale bathymetry map
## Convert latlon to UTM zone 5
#################################
xmin <- -170
xmax <- -132
ymin <- 52
ymax <- 60.5
bathymap <- getNOAA.bathy(lon1 = xmin, lon2 = xmax,
lat1 = ymin, lat2 = ymax,
resolution = 1)
bathymap <- fortify.bathy(bathymap)
#####################
## Turn latlon to UTM for distances
#####################
bathymap_coord = sp::SpatialPoints(coords = bathymap[,c('x', 'y')],
proj4string = CRS('+proj=longlat') )
cord.UTM <- sp::spTransform(bathymap_coord, CRS("+proj=utm +zone=5N"))
bathymap[,c('E_km', 'N_km')] = cord.UTM@coords / 1000
#####################
## Plot
#####################
plot(Extrapolation_List$Data_Extrap[,c('E_km', 'N_km')], pch = '.')
points(Extrapolation_List$Data_Extrap[Extrapolation_List$Data_Extrap$DEPTH <=0,c('E_km', 'N_km')], pch = 16, col = 'red')
points(Extrapolation_List$Data_Extrap[Extrapolation_List$Data_Extrap$DEPTH <=0,c('E_km', 'N_km')], pch = 16, col = 'red')
Extrapolation_List$Data_Extrap$DEPTH <=0
#####################
## Assign bathymetry values for each extrapolation grid cell to
## the nearest point in the bathymetry map
#####################
bathy_idx = RANN::nn2(query=Extrapolation_List$Data_Extrap[,c('E_km','N_km')],
data = bathymap[,c('E_km', 'N_km')],
k = 300)$nn.idx
Extrapolation_List$Data_Extrap$DEPTH = -bathymap$z[bathy_idx[,1]]
points(Extrapolation_List$Data_Extrap[Extrapolation_List$Data_Extrap$DEPTH <=0,c('E_km', 'N_km')], pch = 16, col = 'red')
?scale
center(10,10)
scale(10:10)
scale(-10:10)
#############################
## Center depth and calculate depth^2
#############################
Extrapolation_List$Data_Extrap$DEPTH = scale(Extrapolation_List$Data_Extrap$depth)
scale(Extrapolation_List$Data_Extrap$depth)
##################################
## Assign bathymetry value to each extrapolation grid
## Gulf of Alaska
#################################
setwd("/Users/zackoyafuso/Documents/GitHub/MS_OM_GoA/data/")
##################################
## Import Libraries
#################################
library(marmap); library(sp); library(RANN); library(raster);
##################################
## Load Extrapolation Grid used in VAST
#################################
load('Spatial_Settings.RData')
##################################
## Extract fine-scale bathymetry map
## Convert latlon to UTM zone 5
#################################
xmin <- -170
xmax <- -132
ymin <- 52
ymax <- 60.5
bathymap <- getNOAA.bathy(lon1 = xmin, lon2 = xmax,
lat1 = ymin, lat2 = ymax,
resolution = 1)
bathymap <- fortify.bathy(bathymap)
bathymap_coord = sp::SpatialPoints(coords = bathymap[,c('x', 'y')],
proj4string = CRS('+proj=longlat') )
cord.UTM <- sp::spTransform(bathymap_coord, CRS("+proj=utm +zone=5N"))
bathymap[,c('E_km', 'N_km')] = cord.UTM@coords / 1000
#####################
## Assign bathymetry values for each extrapolation grid cell to
## the nearest point in the bathymetry map
#####################
bathy_idx = RANN::nn2(query=Extrapolation_List$Data_Extrap[,c('E_km','N_km')],
data = bathymap[,c('E_km', 'N_km')],
k = 300)$nn.idx
Extrapolation_List$Data_Extrap$depth = -bathymap$z[bathy_idx[,1]]
#####################
## Plot locations where depths are negative (land?)
#####################
plot(Extrapolation_List$Data_Extrap[,c('E_km', 'N_km')], pch = '.')
points(Extrapolation_List$Data_Extrap[Extrapolation_List$Data_Extrap$depth <=0,c('E_km', 'N_km')], pch = 16, col = 'red')
#####################
## Assign nearest bathymetry values to those grid cells where depths are
## negative. This involes an iterative while loop
#####################
neg_depths = sum(Extrapolation_List$Data_Extrap$depth <=0)
k = 2
while(neg_depths != 0){
idxs = which(Extrapolation_List$Data_Extrap$depth <= 0)
Extrapolation_List$Data_Extrap$depth[idxs] = -bathymap$z[bathy_idx[idxs,k]]
neg_depths = sum(Extrapolation_List$Data_Extrap$depth <=0)
k = k + 1
}
