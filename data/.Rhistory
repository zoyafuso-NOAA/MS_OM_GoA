for(ifile in dir(SamplingStrata_dir, full.names = T)) source(ifile)
source(paste0(github_dir, '/buildStrataDF_Zack.R'))
#########################
## Load VAST products
#########################
load(paste0(VAST_dir, '/VAST_MS_GoA_Run.RData'))
load(paste0(VAST_dir, '/Spatial_Settings.RData'))
load(paste0(dirname(github_dir), '/Extrapolation_depths.RData'))
#########################
## Index years that had data
#########################
Year_Set = seq(min(Data_Geostat[,'Year']),max(Data_Geostat[,'Year']))
Years2Include = which( Year_Set %in% sort(unique(Data_Geostat[,'Year'])))
NTime = length(Years2Include)
##########################
## Create the data inputs to SamplingStrata
##########################
df = df_raw = NULL
df = cbind(
data.frame(Domain = 1,
x = 1:Save$TmbData$n_g,
lat = Extrapolation_depths$N_km,
lon = Extrapolation_depths$E_km - min(Extrapolation_depths$E_km),
depth = Extrapolation_depths$depth),
apply(X=Save$Report$Index_gcyl[,,Years2Include,], MARGIN = 1:2, FUN = mean ) )
names(df)[-(1:5)] = gsub(x = Save$Spp, pattern = ' ', replacement = '_')
frame <- buildFrameDF(df = df,
id = "x",
X = c("depth", 'lon'),
Y = gsub(x = Save$Spp, pattern = ' ', replacement = '_'),
domainvalue = "Domain")
for(iT in 1:NTime){
df_raw = rbind(df_raw, cbind(
data.frame(Domain = 1,
x = 1:Save$TmbData$n_g,
year = iT,
lat = Extrapolation_depths$N_km,
lon = Extrapolation_depths$E_km - min(Extrapolation_depths$E_km),
depth = Extrapolation_depths$depth),
Save$Report$Index_gcyl[,,Years2Include[iT],] )
)
}
names(df_raw)[-(1:6)] = gsub(x = Save$Spp, pattern = ' ', replacement = '_')
frame_raw <- buildFrameDF(df = df_raw,
id = "x",
X = c("depth", 'lon'),
Y = gsub(x = Save$Spp, pattern = ' ', replacement = '_'),
domainvalue = "Domain")
############################
## Settings for optimizer
############################
settings = rbind(expand.grid(cv = c(0.2, 0.15),
mut_change = c(0.1, 0.01),
elitism_rate = c(0.2, 0.1),
nstata = c(5,7,10),
iter = 1:10),
expand.grid(cv = c(0.2, 0.15),
mut_change = 0.1,
elitism_rate = 0.1,
nstata = c(6,8,11:20),
iter = 1:10)
)
ns = Save$TmbData$n_c
rm(list = c('Save', 'Spatial_List', 'spp_df', 'strata.limits', 'fine_scale',
'Method', 'modelno', 'n_x', 'which_spp', 'Year_Set',
'Years2Include', 'Data_Geostat', 'df', 'Extrapolation_List',
'gulf_of_alaska_grid', 'ifile', 'iT', 'df_raw'))
res_df = as.matrix(frame[,c('id', 'domainvalue')])
strata_list = list()
source('~/.active-rstudio-document', echo=TRUE)
50 / 3
source('~/.active-rstudio-document', echo=TRUE)
expand.grid(cv = c(0.2, 0.15),
mut_change = 0.1,
elitism_rate = 0.1,
nstata = 9,
iter = 1:10)
#################################
## Parallelize the Optimization Process
## Method == "continous"
#################################
rm(list = ls())
###############################
## Import required packages
###############################
library(VAST);  library(mvtnorm); library(sp); library(RColorBrewer);
library(raster)
library(memoise); library(doParallel); library(foreach); library(iterators);
library(parallel); library(pbapply); library(formattable)
###############################
## Set up directories
###############################
which_machine = c('Zack_MAC'=1, 'Zack_PC' =2, 'Zack_GI_PC'=3, 'VM' = 4)[3]
SamplingStrata_dir = paste0(c('',
'C:/Users/Zack Oyafuso',
'C:/Users/zack.oyafuso',
'C:/Users/zack.oyafuso')[which_machine],
'/Downloads/SamplingStrata-master/R')
github_dir = paste0(c('',
'C:/Users/Zack Oyafuso/Documents',
'C:/Users/zack.oyafuso/Work',
'C:/Users/zack.oyafuso/Work')[which_machine],
'/GitHub/MS_OM_GoA/Optimum_Allocation/')
VAST_model = "6g"
VAST_dir = paste0(c('', '',
'C:/Users/zack.oyafuso/Desktop/',
'C:/Users/zack.oyafuso/Desktop/')[which_machine],
'VAST_Runs/VAST_output', VAST_model)
output_wd = c(paste0('/Users/zackoyafuso/Documents/GitHub/MS_OM_GoA/',
'Optimum_Allocation/model_', VAST_model),
paste0("C:/Users/Zack Oyafuso/Documents/GitHub/MS_OM_GoA/",
"Optimum_Allocation/model_", VAST_model),
paste0("C:/Users/zack.oyafuso/Work/GitHub/MS_OM_GoA/",
"Optimum_Allocation/model_", VAST_model),
paste0("C:/Users/zack.oyafuso/Work/GitHub/MS_OM_GoA/",
"Optimum_Allocation/model_", VAST_model))[which_machine]
#########################
## Load functions from SamplingStrata packages into global environment
## Load modified buildStrataDF function
#########################
for(ifile in dir(SamplingStrata_dir, full.names = T)) source(ifile)
source(paste0(github_dir, '/buildStrataDF_Zack.R'))
#########################
## Load VAST products
#########################
load(paste0(VAST_dir, '/VAST_MS_GoA_Run.RData'))
load(paste0(VAST_dir, '/Spatial_Settings.RData'))
load(paste0(dirname(github_dir), '/Extrapolation_depths.RData'))
#########################
## Index years that had data
#########################
Year_Set = seq(min(Data_Geostat[,'Year']),max(Data_Geostat[,'Year']))
Years2Include = which( Year_Set %in% sort(unique(Data_Geostat[,'Year'])))
NTime = length(Years2Include)
##########################
## Create the data inputs to SamplingStrata
##########################
df = df_raw = NULL
df = cbind(
data.frame(Domain = 1,
x = 1:Save$TmbData$n_g,
lat = Extrapolation_depths$N_km,
lon = Extrapolation_depths$E_km - min(Extrapolation_depths$E_km),
depth = Extrapolation_depths$depth),
apply(X=Save$Report$Index_gcyl[,,Years2Include,], MARGIN = 1:2, FUN = mean ) )
names(df)[-(1:5)] = gsub(x = Save$Spp, pattern = ' ', replacement = '_')
frame <- buildFrameDF(df = df,
id = "x",
X = c("depth", 'lon'),
Y = gsub(x = Save$Spp, pattern = ' ', replacement = '_'),
domainvalue = "Domain")
for(iT in 1:NTime){
df_raw = rbind(df_raw, cbind(
data.frame(Domain = 1,
x = 1:Save$TmbData$n_g,
year = iT,
lat = Extrapolation_depths$N_km,
lon = Extrapolation_depths$E_km - min(Extrapolation_depths$E_km),
depth = Extrapolation_depths$depth),
Save$Report$Index_gcyl[,,Years2Include[iT],] )
)
}
names(df_raw)[-(1:6)] = gsub(x = Save$Spp, pattern = ' ', replacement = '_')
frame_raw <- buildFrameDF(df = df_raw,
id = "x",
X = c("depth", 'lon'),
Y = gsub(x = Save$Spp, pattern = ' ', replacement = '_'),
domainvalue = "Domain")
############################
## Settings for optimizer
############################
settings = rbind(expand.grid(cv = c(0.2, 0.15),
mut_change = c(0.1, 0.01),
elitism_rate = c(0.2, 0.1),
nstata = c(5,7,10),
iter = 1:10),
expand.grid(cv = c(0.2, 0.15),
mut_change = 0.1,
elitism_rate = 0.1,
nstata = c(6,8,11:20),
iter = 1:10),
expand.grid(cv = c(0.2, 0.15),
mut_change = 0.1,
elitism_rate = 0.1,
nstata = 9,
iter = 1:10)
)
ns = Save$TmbData$n_c
rm(list = c('Save', 'Spatial_List', 'spp_df', 'strata.limits', 'fine_scale',
'Method', 'modelno', 'n_x', 'which_spp', 'Year_Set',
'Years2Include', 'Data_Geostat', 'df', 'Extrapolation_List',
'gulf_of_alaska_grid', 'ifile', 'iT', 'df_raw'))
res_df = as.matrix(frame[,c('id', 'domainvalue')])
strata_list = list()
iter_range = unlist(list('Zack_MAC'= NA, 'Zack_PC' = 241:320,
# 'Zack_GI_PC'=321:400,
'Zack_GI_PC'=385:400,
'VM' = 401:480)[which_machine])
for(ii in iter_range){
cv = list()
for(spp in 1:ns) cv[[paste0('CV', spp)]] = settings$cv[ii]
cv[['DOM']] = 1
cv[['domainvalue']] = 1
cv <- as.data.frame(cv)
set.seed(1234 + ii)
solution <- optimStrata(method = "continuous",
errors = cv,
framesamp = frame,
iter = 50,
pops = 30,
elitism_rate = settings$elitism_rate[ii],
mut_chance = settings$mut_change[ii],
nStrata = settings$nstata[ii],
showPlot = T,
parallel = F)
strata_list[[ii]] =  summaryStrata(solution$framenew,
solution$aggr_strata,
progress=FALSE)
res_df = cbind(res_df, solution$framenew$STRATO)
save(list = c('strata_list', 'res_df', 'settings',
'frame', 'ns', 'NTime', 'VAST_model'),
file = paste0(output_wd, '/optimization_spatiotemporal_',
min(iter_range), '-', ii,'.RData') )
#Plot
goa = SpatialPointsDataFrame(coords = Extrapolation_depths[,c('E_km', 'N_km')],
data = cbind(solution$framenew[,paste0('Y',1:ns)],
Str_no = solution$framenew$STRATO,
depth = solution$framenew$X1,
lon = solution$framenew$X2) )
goa_ras = raster(goa, resolution = 5)
goa_ras =rasterize(x = goa, y = goa_ras, field = 'Str_no')
plot(goa_ras, col = terrain.colors(10)[-10], axes = F)
}
#################################
## Parallelize the Optimization Process
## Method == "continous"
#################################
rm(list = ls())
###############################
## Import required packages
###############################
library(VAST);  library(mvtnorm); library(sp); library(RColorBrewer);
library(raster)
library(memoise); library(doParallel); library(foreach); library(iterators);
library(parallel); library(pbapply); library(formattable)
###############################
## Set up directories
###############################
which_machine = c('Zack_MAC'=1, 'Zack_PC' =2, 'Zack_GI_PC'=3, 'VM' = 4)[3]
SamplingStrata_dir = paste0(c('',
'C:/Users/Zack Oyafuso',
'C:/Users/zack.oyafuso',
'C:/Users/zack.oyafuso')[which_machine],
'/Downloads/SamplingStrata-master/R')
github_dir = paste0(c('',
'C:/Users/Zack Oyafuso/Documents',
'C:/Users/zack.oyafuso/Work',
'C:/Users/zack.oyafuso/Work')[which_machine],
'/GitHub/MS_OM_GoA/Optimum_Allocation/')
VAST_model = "6g"
VAST_dir = paste0(c('', '',
'C:/Users/zack.oyafuso/Desktop/',
'C:/Users/zack.oyafuso/Desktop/')[which_machine],
'VAST_Runs/VAST_output', VAST_model)
output_wd = c(paste0('/Users/zackoyafuso/Documents/GitHub/MS_OM_GoA/',
'Optimum_Allocation/model_', VAST_model),
paste0("C:/Users/Zack Oyafuso/Documents/GitHub/MS_OM_GoA/",
"Optimum_Allocation/model_", VAST_model),
paste0("C:/Users/zack.oyafuso/Work/GitHub/MS_OM_GoA/",
"Optimum_Allocation/model_", VAST_model),
paste0("C:/Users/zack.oyafuso/Work/GitHub/MS_OM_GoA/",
"Optimum_Allocation/model_", VAST_model))[which_machine]
#########################
## Load functions from SamplingStrata packages into global environment
## Load modified buildStrataDF function
#########################
for(ifile in dir(SamplingStrata_dir, full.names = T)) source(ifile)
source(paste0(github_dir, '/buildStrataDF_Zack.R'))
#########################
## Load VAST products
#########################
load(paste0(VAST_dir, '/VAST_MS_GoA_Run.RData'))
load(paste0(VAST_dir, '/Spatial_Settings.RData'))
load(paste0(dirname(github_dir), '/Extrapolation_depths.RData'))
#########################
## Index years that had data
#########################
Year_Set = seq(min(Data_Geostat[,'Year']),max(Data_Geostat[,'Year']))
Years2Include = which( Year_Set %in% sort(unique(Data_Geostat[,'Year'])))
NTime = length(Years2Include)
##########################
## Create the data inputs to SamplingStrata
##########################
df = df_raw = NULL
df = cbind(
data.frame(Domain = 1,
x = 1:Save$TmbData$n_g,
lat = Extrapolation_depths$N_km,
lon = Extrapolation_depths$E_km - min(Extrapolation_depths$E_km),
depth = Extrapolation_depths$depth),
apply(X=Save$Report$Index_gcyl[,,Years2Include,], MARGIN = 1:2, FUN = mean ) )
names(df)[-(1:5)] = gsub(x = Save$Spp, pattern = ' ', replacement = '_')
frame <- buildFrameDF(df = df,
id = "x",
X = c("depth", 'lon'),
Y = gsub(x = Save$Spp, pattern = ' ', replacement = '_'),
domainvalue = "Domain")
for(iT in 1:NTime){
df_raw = rbind(df_raw, cbind(
data.frame(Domain = 1,
x = 1:Save$TmbData$n_g,
year = iT,
lat = Extrapolation_depths$N_km,
lon = Extrapolation_depths$E_km - min(Extrapolation_depths$E_km),
depth = Extrapolation_depths$depth),
Save$Report$Index_gcyl[,,Years2Include[iT],] )
)
}
names(df_raw)[-(1:6)] = gsub(x = Save$Spp, pattern = ' ', replacement = '_')
frame_raw <- buildFrameDF(df = df_raw,
id = "x",
X = c("depth", 'lon'),
Y = gsub(x = Save$Spp, pattern = ' ', replacement = '_'),
domainvalue = "Domain")
############################
## Settings for optimizer
############################
settings = rbind(expand.grid(cv = c(0.2, 0.15),
mut_change = c(0.1, 0.01),
elitism_rate = c(0.2, 0.1),
nstata = c(5,7,10),
iter = 1:10),
expand.grid(cv = c(0.2, 0.15),
mut_change = 0.1,
elitism_rate = 0.1,
nstata = c(6,8,11:20),
iter = 1:10),
expand.grid(cv = c(0.2, 0.15),
mut_change = 0.1,
elitism_rate = 0.1,
nstata = 9,
iter = 1:10)
)
ns = Save$TmbData$n_c
rm(list = c('Save', 'Spatial_List', 'spp_df', 'strata.limits', 'fine_scale',
'Method', 'modelno', 'n_x', 'which_spp', 'Year_Set',
'Years2Include', 'Data_Geostat', 'df', 'Extrapolation_List',
'gulf_of_alaska_grid', 'ifile', 'iT', 'df_raw'))
res_df = as.matrix(frame[,c('id', 'domainvalue')])
strata_list = list()
iter_range = unlist(list('Zack_MAC'= NA, 'Zack_PC' = 241:320,
# 'Zack_GI_PC'=321:400,
'Zack_GI_PC'=385:400,
'VM' = 401:480)[which_machine])
nrow(iter_range)
nrow(settings)
iter_range = unlist(list('Zack_MAC'= NA, 'Zack_PC' = 241:320,
# 'Zack_GI_PC'=321:400,
'Zack_GI_PC'=481-490,
'VM' = 401:480)[which_machine])
iter_range
iter_range = unlist(list('Zack_MAC'= NA, 'Zack_PC' = 241:320,
# 'Zack_GI_PC'=321:400,
'Zack_GI_PC'=481:490,
'VM' = 401:480)[which_machine])
iter_range
for(ii in iter_range){
cv = list()
for(spp in 1:ns) cv[[paste0('CV', spp)]] = settings$cv[ii]
cv[['DOM']] = 1
cv[['domainvalue']] = 1
cv <- as.data.frame(cv)
set.seed(as.integer(1234 + ii))
solution <- optimStrata(method = "continuous",
errors = cv,
framesamp = frame,
iter = 50,
pops = 30,
elitism_rate = settings$elitism_rate[ii],
mut_chance = settings$mut_change[ii],
nStrata = settings$nstata[ii],
showPlot = T,
parallel = F)
strata_list[[ii]] =  summaryStrata(solution$framenew,
solution$aggr_strata,
progress=FALSE)
res_df = cbind(res_df, solution$framenew$STRATO)
save(list = c('strata_list', 'res_df', 'settings',
'frame', 'ns', 'NTime', 'VAST_model'),
file = paste0(output_wd, '/optimization_spatiotemporal_',
min(iter_range), '-', ii,'.RData') )
#Plot
goa = SpatialPointsDataFrame(coords = Extrapolation_depths[,c('E_km', 'N_km')],
data = cbind(solution$framenew[,paste0('Y',1:ns)],
Str_no = solution$framenew$STRATO,
depth = solution$framenew$X1,
lon = solution$framenew$X2) )
goa_ras = raster(goa, resolution = 5)
goa_ras =rasterize(x = goa, y = goa_ras, field = 'Str_no')
plot(goa_ras, col = terrain.colors(10)[-10], axes = F)
}
source('~/.active-rstudio-document', echo=TRUE)
setwd('C:/Users/zack.oyafuso/Desktop/data-raw/')
haul = read.csv('haul.csv')
haul = subset(haul, REGION == 'GOA')
head(haul)
table(haul$ABUNDANCE_HAUL)
library(dplyr)
setwd("C:/Users/zack.oyafuso/Work/GitHub/MS_OM_GoA/data/")
# setwd("/Users/zackoyafuso/Documents/GitHub/MS_OM_GoA/data/")
data_wd = 'C:/Users/zack.oyafuso/Desktop/'
data = read.csv(paste0(data_wd, "data-raw/cpue_GOA_selected_spp.csv"),
stringsAsFactors = FALSE) # CPUE is (num or kg / km^2)
# join haul data to get coordinates, depth, bottom and surface temperature
haul <- read.csv(paste0(data_wd, "data-raw/haul.csv"),
stringsAsFactors = FALSE)
haul <- cbind(haul,
geosphere::midPoint(cbind(haul$START_LONGITUDE, haul$START_LATITUDE),
cbind(haul$END_LONGITUDE, haul$END_LATITUDE))) # get haul midpoints
haul$DATE <- as.Date(haul$START_TIME, format = "%d-%b-%y")
haul$MONTH <- lubridate::month(haul$DATE)
haul$DAY <- lubridate::day(haul$DATE)
haul <- haul %>% select(HAULJOIN, GEAR_DEPTH, SURFACE_TEMPERATURE, GEAR_TEMPERATURE, LATITUDE = lat, LONGITUDE = lon,
DATE, DAY, MONTH)
data <- inner_join(data, haul)
# join species names
species_codes =  read.csv(paste0(data_wd, "data-raw/species.csv"),
stringsAsFactors = FALSE)
species_codes = select(species_codes, -YEAR_ADDED)
data <- inner_join(data, species_codes)
head(data)
###########################
## Import Data using Lewis's code
###########################
library(dplyr)
setwd("C:/Users/zack.oyafuso/Work/GitHub/MS_OM_GoA/data/")
# setwd("/Users/zackoyafuso/Documents/GitHub/MS_OM_GoA/data/")
data_wd = 'C:/Users/zack.oyafuso/Desktop/'
# data_wd = '/Users/zackoyafuso//Desktop/AK_BTS/'
data = read.csv(paste0(data_wd, "data-raw/cpue_GOA_selected_spp.csv"),
stringsAsFactors = FALSE) # CPUE is (num or kg / km^2)
# join haul data to get coordinates, depth, bottom and surface temperature
haul <- read.csv(paste0(data_wd, "data-raw/haul.csv"),
stringsAsFactors = FALSE)
haul <- cbind(haul,
geosphere::midPoint(cbind(haul$START_LONGITUDE, haul$START_LATITUDE),
cbind(haul$END_LONGITUDE, haul$END_LATITUDE))) # get haul midpoints
haul$DATE <- as.Date(haul$START_TIME, format = "%d-%b-%y")
haul$MONTH <- lubridate::month(haul$DATE)
haul$DAY <- lubridate::day(haul$DATE)
haul <- haul %>% select(HAULJOIN, GEAR_DEPTH, SURFACE_TEMPERATURE,
GEAR_TEMPERATURE, LATITUDE = lat, LONGITUDE = lon,
DATE, DAY, MONTH, STRATUM)
data <- inner_join(data, haul)
# join species names
species_codes =  read.csv(paste0(data_wd, "data-raw/species.csv"),
stringsAsFactors = FALSE)
species_codes = select(species_codes, -YEAR_ADDED)
data <- inner_join(data, species_codes)
# select and rename columns, dropping rows with mising depths
data <- data %>% select(YEAR, SURVEY, STRATUM, BOTTOM_DEPTH = GEAR_DEPTH,
SURFACE_TEMPERATURE, GEAR_TEMPERATURE,
# CPUE = WGTCPUE,
EFFORT, WEIGHT,
LATITUDE, LONGITUDE, DATE, DAY, MONTH,
SPECIES_NAME, COMMON_NAME) %>%
tidyr::drop_na(BOTTOM_DEPTH,LATITUDE,LONGITUDE)
# filter to GOA survey, remove tows with 0 bottom depth, and drop 2001 year when
# the survey was incomplete and years before 1996 when a different net/soak time
# was used
data <- data %>% filter(SURVEY == "GOA",
BOTTOM_DEPTH > 0, YEAR != 2001 & YEAR >= 1996)
#sum catches of northern and southern rock sole with rock sole unid. (not distinguished until 1996)
rock_soles <- data %>% dplyr::filter(COMMON_NAME %in% c("rock sole unid.", "southern rock sole", "northern rock sole")) %>%
group_by_at(vars(-WEIGHT, -COMMON_NAME, -SPECIES_NAME)) %>%
summarise(WEIGHT = sum(WEIGHT)) %>%
ungroup() %>%
mutate(SPECIES_NAME = "Lepidopsetta spp.", COMMON_NAME = "rock soles")
data <- as.data.frame(rbind(data, rock_soles))
#sum catches of blackspooted and rougheye rocks with rougheye and blackspotted
#rockfish unid.
B_R_rockfishes <- data %>% dplyr::filter(COMMON_NAME %in% c("blackspotted rockfish", "rougheye rockfish", "rougheye and blackspotted rockfish unid.")) %>%
group_by_at(vars(-WEIGHT, -COMMON_NAME, -SPECIES_NAME)) %>%
summarise(WEIGHT = sum(WEIGHT)) %>%
ungroup() %>%
mutate(SPECIES_NAME = "Sebastes B_R", COMMON_NAME = "B_R_rockfishes")
data <- as.data.frame(rbind(data, B_R_rockfishes))
# scale bottom depth, provide depth^2
data$DEPTH = scale(x = log(data$BOTTOM_DEPTH))
data$DEPTH2 = data$DEPTH^2
data = subset(data,
COMMON_NAME %in% c('Pacific ocean perch',
'arrowtooth flounder',
'Pacific cod',
'walleye pollock',
'Pacific halibut',
'rex sole',
'Dover sole',
'flathead sole',
'sablefish',
'dusky rockfish',
'northern rockfish',
"northern rock sole",
"southern rock sole",
'B_R_rockfishes',
'shortspine thornyhead',
'yellowfin sole'))
head(data)
data = subset(data,
COMMON_NAME %in% c('Pacific ocean perch'))
table(data$STRATUM)
write.csv(x = data, file = "data/GOA_multspp_with_strata.csv", row.names = F)
