load('Optimization_GoA/optimization_results.RData')
species_names = c(as.character(species_df[species_df$SPECIES_CODE%in%species,'COMMON_NAME']),
'All Species')
species_names[2] = "rougheye and blackspotted rockfish"
library(rgdal); library(maptools); library(rgeos); library(raster)
test = readOGR('/Users/zackoyafuso/Desktop/survey_grids/goagrid_nolandsandman.shp')
test_dissolved = unionSpatialPolygons(SpP = test, IDs = test$STRATUM)
temp = test_dissolved
all_sol = colSums(res_mat)
all_sol
all_sol = unlist(colSums(res_mat))
all_sol
all_sol = as.vector(colSums(res_mat))
all_sol
ispp = 15
all_sol = as.vector(colSums(res_mat[res_df$spp_scen == ispp,]))
all_sol
ispp = 15
temp_df = subset(res_df, n == i & spp_scen == ispp)
i = 40
temp_df = subset(res_df, n == i & spp_scen == ispp)
temp_mat = matrix( res_mat[res_df$n == i & res_df$spp_scen == ispp,],
ncol = nstrata )
max_mean_idx = which.max(temp_df$tot_mean)
max_var_idx = which.max(temp_df$tot_var)
range_mean = diff(range(temp_df$tot_mean))
range_var = diff(range(temp_df$tot_var))
dist_mean = (temp_df$tot_mean - max(temp_df$tot_mean)) / range_mean
dist_var =  (temp_df$tot_var - max(temp_df$tot_var)) / range_var
comp_idx = which.min(sqrt(dist_mean^2 + dist_var^2))
sol_idx = c(max_mean_idx, comp_idx, max_var_idx)
sol_idx
subset(res_df, spp_scen == ispp)
setwd("/Users/zackoyafuso/Documents/GitHub/MS_OM_GoA/")
library(tidyr)
library(glpkAPI)
#############################
## Load Optimization Functions
#############################
source('Optimization_GoA/optimization_functions.R')
# or from flat files exported from AFSC database
GOA = read.csv(paste0("/Users/zackoyafuso/Desktop/AK_BTS/data-raw/",
"cpue_GOA_selected_spp.csv"),
stringsAsFactors = FALSE) # CPUE is (num or kg / km^2)
# Filter Species:
# Arrowtooth Flounder (Atherestes stomias, code 10110)
# Pacific Cod (Gadus macrocephalus, code 21720)
# Pacific Ocean Perch (Sebastes alutus, code 30060)
# Sablefish (Anoplopoma fimbria, code 20510)
# Walleye pollock (Gadus chalcogrammus, code 21740)
# Dover sole (Solea solea, code 10180)
# Pacific halibut (Hippoglossus stenolepis, code 10120)
# Flathead sole (Hippoglossoides elassodon, code 10130)
# Rex sole (Glyptocephalus zachirus, code 10200)
# Dusky rockfish (Sebastes variabilis, code 30152)
# Northern rockfish (Sebastes polyspinis, code 30420)
# Rougheye and blackspotted rockfishes (Sebastes aleutianus and Sebastes melanostictus, respectively, codes 30050,30051,30052)
# Northern and Southern rock sole (Lepidopsetta polyxystra and Lepidopseta bilineata, respectivity, codes 10260,10261,10262)
# data <- filter(GOA, SPECIES_CODE %in% c(10110, 21720, 30060, 20510, 21740,
#                                         10180, 10120, 10130, 10200, 30152,
#                                         30420, 30050,30051,30052 ))
species = c(10110, 21720, 30060, 20510, 21740,
10180, 10120, 10130, 10200, 30152,
30420, 30050,30051,30052 )
data = GOA[GOA$SPECIES_CODE %in% species,]
ns = length(species)
nstrata = length(unique(data$STRATUM))
strata = paste(sort(unique(data$STRATUM)) )
weight_scen = rbind(matrix(nrow=ns,ncol=ns,data=1/23)+
diag(9/23,nrow=ns,ncol=ns),
c(rep(1/ns, ns)))
res_df = res_mat = data.frame()
ispp = 15
optim_df = calc_portfolio(weights = weight_scen[ispp,])
optim_df
optim_df[,'Total_Var']
optim_df[,'TotalVar']
optim_df[,'TotalVar'] / sum(optim_df[,'TotalVar'])
ns = length(species)
nstrata = length(unique(data$STRATUM))
strata = paste(sort(unique(data$STRATUM)) )
weight_scen = rbind(matrix(nrow=ns,ncol=ns,data=1/23)+
diag(9/23,nrow=ns,ncol=ns),
c(rep(1/ns, ns)))
res_df = res_mat = data.frame()
for(ispp in 1:(ns+1)){
optim_df = calc_portfolio(weights = weight_scen[ispp,])
for(i in 1:nstrata) {
temp = 0.001; output_code = 0
while(output_code %in% c(0,14)){
x = do_optim(objvals = optim_df[, 'return'],
variances = optim_df[, 'TotalVar'],
number_of_stations = i,
var_constraint = temp)
output_code = x$output_code
if(output_code %in% c(0,14)){
res_df = rbind(res_df, data.frame(spp_scen = ispp,
n = i,
tot_var = x$tot_var,
rel_var = x$rel_var,
tot_mean = x$objval) )
res_mat = rbind(res_mat, as.integer(x$x))
temp = x$rel_var + 0.001
}
}
}
}
res_mat = as.matrix(res_mat)
save(list = c('res_df', 'res_mat', 'ns', 'nstrata', 'strata', 'species'),
file = 'Optimization_GoA/optimization_results.RData')
object.size(res_mat)
object.size(res_mat) / 1e6
object.size(res_df) / 1e6
?object.size
object.size(res_mat, units = 'Gb')
object.size(res_mat, unis = 'Gb')
object.size(res_mat, unit = 'Gb')
format(object.size(res_mat), units = 'Gb')
format(object.size(res_mat), units = 'Mb')
format(object.size(res_df), units = 'Mb')
save(list = c('res_df', 'res_mat', 'ns', 'nstrata', 'strata', 'species'),
file = 'Optimization_GoA/optimization_results.RData')
###########################
## Tradeoff Plots for MS Optimization
###########################
setwd("/Users/zackoyafuso/Documents/GitHub/MS_OM_GoA/")
###########################
## Import Optimization results and species data
###########################
species_df = read.csv('/Users/zackoyafuso/Desktop/AK_BTS/data-raw/species.csv')
load('Optimization_GoA/optimization_results.RData')
species_names = c(as.character(species_df[species_df$SPECIES_CODE%in%species,'COMMON_NAME']),
'All Species')
species_names[2] = "rougheye and blackspotted rockfish"
library(rgdal); library(maptools); library(rgeos); library(raster)
test = readOGR('/Users/zackoyafuso/Desktop/survey_grids/goagrid_nolandsandman.shp')
test_dissolved = unionSpatialPolygons(SpP = test, IDs = test$STRATUM)
temp = test_dissolved
ispp = 15
i = 40
temp_df = subset(res_df, n == i & spp_scen == ispp)
temp_mat = matrix( res_mat[res_df$n == i & res_df$spp_scen == ispp,],
ncol = nstrata )
temp_df
plot(tot_var ~ tot_mean, data = temp_df)
plot(tot_var ~ tot_mean, data = temp_df, type = 'l')
plot(tot_var ~ tot_mean, data = temp_df, type = 'l', lwd = 2)
max_mean_idx = which.max(temp_df$tot_mean)
max_var_idx = which.max(temp_df$tot_var)
range_mean = diff(range(temp_df$tot_mean))
range_var = diff(range(temp_df$tot_var))
dist_mean = (temp_df$tot_mean - max(temp_df$tot_mean)) / range_mean
dist_var =  (temp_df$tot_var - max(temp_df$tot_var)) / range_var
comp_idx = which.min(sqrt(dist_mean^2 + dist_var^2))
sol_idx = c(max_mean_idx, comp_idx, max_var_idx)
subset(res_df, spp_scen == ispp)
temp_df[sol_idx]
temp_df[sol_idx,]
str(temp_df)
str(temp_mat)
temp_mat[sol_idx,]
all_sol = matrix(data = 0, nrow = 3, ncol = nstrata)
all_sol = array(data = 0, dim = c(1,3,nstrata))
all_sol
all_sol[1,,]
all_sol = array(data = 0, dim = c(1,3,nstrata))
ispp = 15
for(i in 1:nstrata){
temp_df = subset(res_df, n == i & spp_scen == ispp)
temp_mat = matrix( res_mat[res_df$n == i & res_df$spp_scen == ispp,],
ncol = nstrata )
max_mean_idx = which.max(temp_df$tot_mean)
max_var_idx = which.max(temp_df$tot_var)
range_mean = diff(range(temp_df$tot_mean))
range_var = diff(range(temp_df$tot_var))
dist_mean = (temp_df$tot_mean - max(temp_df$tot_mean)) / range_mean
dist_var =  (temp_df$tot_var - max(temp_df$tot_var)) / range_var
comp_idx = which.min(sqrt(dist_mean^2 + dist_var^2))
sol_idx = c(max_mean_idx, comp_idx, max_var_idx)
all_sol[1,,] = all_sol[1,,] + temp_mat[sol_idx,]
}
all_sol[1,,]
temp_mat[sol_idx,]
i
all_sol = array(data = 0, dim = c(1,3,nstrata))
ispp = 15
for(i in 1:(nstrata-1)){
temp_df = subset(res_df, n == i & spp_scen == ispp)
temp_mat = matrix( res_mat[res_df$n == i & res_df$spp_scen == ispp,],
ncol = nstrata )
max_mean_idx = which.max(temp_df$tot_mean)
max_var_idx = which.max(temp_df$tot_var)
range_mean = diff(range(temp_df$tot_mean))
range_var = diff(range(temp_df$tot_var))
dist_mean = (temp_df$tot_mean - max(temp_df$tot_mean)) / range_mean
dist_var =  (temp_df$tot_var - max(temp_df$tot_var)) / range_var
comp_idx = which.min(sqrt(dist_mean^2 + dist_var^2))
sol_idx = c(max_mean_idx, comp_idx, max_var_idx)
all_sol[1,,] = all_sol[1,,] + temp_mat[sol_idx,]
}
i
nstrata
ispp = 15
for(i in 1:(nstrata-2)){
temp_df = subset(res_df, n == i & spp_scen == ispp)
temp_mat = matrix( res_mat[res_df$n == i & res_df$spp_scen == ispp,],
ncol = nstrata )
max_mean_idx = which.max(temp_df$tot_mean)
max_var_idx = which.max(temp_df$tot_var)
range_mean = diff(range(temp_df$tot_mean))
range_var = diff(range(temp_df$tot_var))
dist_mean = (temp_df$tot_mean - max(temp_df$tot_mean)) / range_mean
dist_var =  (temp_df$tot_var - max(temp_df$tot_var)) / range_var
comp_idx = which.min(sqrt(dist_mean^2 + dist_var^2))
sol_idx = c(max_mean_idx, comp_idx, max_var_idx)
all_sol[1,,] = all_sol[1,,] + temp_mat[sol_idx,]
}
all_sol
all_sol[1,,]
temp
all_sol[1,1,]
plot(temp, col = heat.colors(max(all_sol[1,1,]))[all_sol[1,1,]], )
plot(temp, col = heat.colors(max(all_sol[1,1,]))[all_sol[1,1,]], border = NA)
ns
all_sol = array(data = 0, dim = c(ns+1,3,nstrata))
for(ispp in 1:(ns+1)){
for(i in 1:(nstrata-2)){
temp_df = subset(res_df, n == i & spp_scen == ispp)
temp_mat = matrix( res_mat[res_df$n == i & res_df$spp_scen == ispp,],
ncol = nstrata )
max_mean_idx = which.max(temp_df$tot_mean)
max_var_idx = which.max(temp_df$tot_var)
range_mean = diff(range(temp_df$tot_mean))
range_var = diff(range(temp_df$tot_var))
dist_mean = (temp_df$tot_mean - max(temp_df$tot_mean)) / range_mean
dist_var =  (temp_df$tot_var - max(temp_df$tot_var)) / range_var
comp_idx = which.min(sqrt(dist_mean^2 + dist_var^2))
sol_idx = c(max_mean_idx, comp_idx, max_var_idx)
all_sol[ispp,,] = all_sol[ispp,,] + temp_mat[sol_idx,]
}
}
i
for(ispp in 1:(ns+1)){
for(i in 1:(50)){
temp_df = subset(res_df, n == i & spp_scen == ispp)
temp_mat = matrix( res_mat[res_df$n == i & res_df$spp_scen == ispp,],
ncol = nstrata )
max_mean_idx = which.max(temp_df$tot_mean)
max_var_idx = which.max(temp_df$tot_var)
range_mean = diff(range(temp_df$tot_mean))
range_var = diff(range(temp_df$tot_var))
dist_mean = (temp_df$tot_mean - max(temp_df$tot_mean)) / range_mean
dist_var =  (temp_df$tot_var - max(temp_df$tot_var)) / range_var
comp_idx = which.min(sqrt(dist_mean^2 + dist_var^2))
sol_idx = c(max_mean_idx, comp_idx, max_var_idx)
all_sol[ispp,,] = all_sol[ispp,,] + temp_mat[sol_idx,]
}
}
i
ispp
all_sol = array(data = 0, dim = c(ns+1,3,nstrata))
for(ispp in 1:(ns+1)){
for(i in 1:(45)){
temp_df = subset(res_df, n == i & spp_scen == ispp)
temp_mat = matrix( res_mat[res_df$n == i & res_df$spp_scen == ispp,],
ncol = nstrata )
max_mean_idx = which.max(temp_df$tot_mean)
max_var_idx = which.max(temp_df$tot_var)
range_mean = diff(range(temp_df$tot_mean))
range_var = diff(range(temp_df$tot_var))
dist_mean = (temp_df$tot_mean - max(temp_df$tot_mean)) / range_mean
dist_var =  (temp_df$tot_var - max(temp_df$tot_var)) / range_var
comp_idx = which.min(sqrt(dist_mean^2 + dist_var^2))
sol_idx = c(max_mean_idx, comp_idx, max_var_idx)
all_sol[ispp,,] = all_sol[ispp,,] + temp_mat[sol_idx,]
}
}
all_sol = array(data = 0, dim = c(ns+1,3,nstrata))
for(ispp in 1:(ns+1)){
for(i in 1:(40)){
temp_df = subset(res_df, n == i & spp_scen == ispp)
temp_mat = matrix( res_mat[res_df$n == i & res_df$spp_scen == ispp,],
ncol = nstrata )
max_mean_idx = which.max(temp_df$tot_mean)
max_var_idx = which.max(temp_df$tot_var)
range_mean = diff(range(temp_df$tot_mean))
range_var = diff(range(temp_df$tot_var))
dist_mean = (temp_df$tot_mean - max(temp_df$tot_mean)) / range_mean
dist_var =  (temp_df$tot_var - max(temp_df$tot_var)) / range_var
comp_idx = which.min(sqrt(dist_mean^2 + dist_var^2))
sol_idx = c(max_mean_idx, comp_idx, max_var_idx)
all_sol[ispp,,] = all_sol[ispp,,] + temp_mat[sol_idx,]
}
}
i
all_sol = array(data = 0, dim = c(ns+1,3,nstrata))
for(ispp in 1:(ns+1)){
for(i in 5:40)){
temp_df = subset(res_df, n == i & spp_scen == ispp)
temp_mat = matrix( res_mat[res_df$n == i & res_df$spp_scen == ispp,],
ncol = nstrata )
max_mean_idx = which.max(temp_df$tot_mean)
max_var_idx = which.max(temp_df$tot_var)
range_mean = diff(range(temp_df$tot_mean))
range_var = diff(range(temp_df$tot_var))
dist_mean = (temp_df$tot_mean - max(temp_df$tot_mean)) / range_mean
dist_var =  (temp_df$tot_var - max(temp_df$tot_var)) / range_var
comp_idx = which.min(sqrt(dist_mean^2 + dist_var^2))
sol_idx = c(max_mean_idx, comp_idx, max_var_idx)
all_sol[ispp,,] = all_sol[ispp,,] + temp_mat[sol_idx,]
}
}
all_sol = array(data = 0, dim = c(ns+1,3,nstrata))
for(ispp in 1:(ns+1)){
for(i in 5:40)){
temp_df = subset(res_df, n == i & spp_scen == ispp)
temp_mat = matrix( res_mat[res_df$n == i & res_df$spp_scen == ispp,],
ncol = nstrata )
max_mean_idx = which.max(temp_df$tot_mean)
max_var_idx = which.max(temp_df$tot_var)
range_mean = diff(range(temp_df$tot_mean))
range_var = diff(range(temp_df$tot_var))
dist_mean = (temp_df$tot_mean - max(temp_df$tot_mean)) / range_mean
dist_var =  (temp_df$tot_var - max(temp_df$tot_var)) / range_var
comp_idx = which.min(sqrt(dist_mean^2 + dist_var^2))
sol_idx = c(max_mean_idx, comp_idx, max_var_idx)
all_sol[ispp,,] = all_sol[ispp,,] + temp_mat[sol_idx,]
}
}
all_sol = array(data = 0, dim = c(ns+1,3,nstrata))
for(ispp in 1:(ns+1)){
for(i in 5:40){
temp_df = subset(res_df, n == i & spp_scen == ispp)
temp_mat = matrix( res_mat[res_df$n == i & res_df$spp_scen == ispp,],
ncol = nstrata )
max_mean_idx = which.max(temp_df$tot_mean)
max_var_idx = which.max(temp_df$tot_var)
range_mean = diff(range(temp_df$tot_mean))
range_var = diff(range(temp_df$tot_var))
dist_mean = (temp_df$tot_mean - max(temp_df$tot_mean)) / range_mean
dist_var =  (temp_df$tot_var - max(temp_df$tot_var)) / range_var
comp_idx = which.min(sqrt(dist_mean^2 + dist_var^2))
sol_idx = c(max_mean_idx, comp_idx, max_var_idx)
all_sol[ispp,,] = all_sol[ispp,,] + temp_mat[sol_idx,]
}
}
for(ispp in 1:(ns+1)){
for(i in 5:42){
temp_df = subset(res_df, n == i & spp_scen == ispp)
temp_mat = matrix( res_mat[res_df$n == i & res_df$spp_scen == ispp,],
ncol = nstrata )
max_mean_idx = which.max(temp_df$tot_mean)
max_var_idx = which.max(temp_df$tot_var)
range_mean = diff(range(temp_df$tot_mean))
range_var = diff(range(temp_df$tot_var))
dist_mean = (temp_df$tot_mean - max(temp_df$tot_mean)) / range_mean
dist_var =  (temp_df$tot_var - max(temp_df$tot_var)) / range_var
comp_idx = which.min(sqrt(dist_mean^2 + dist_var^2))
sol_idx = c(max_mean_idx, comp_idx, max_var_idx)
all_sol[ispp,,] = all_sol[ispp,,] + temp_mat[sol_idx,]
}
}
all_sol[1,,]
all_sol = array(data = 0, dim = c(ns+1,3,nstrata))
for(ispp in 1:(ns+1)){
for(i in 5:45){
temp_df = subset(res_df, n == i & spp_scen == ispp)
temp_mat = matrix( res_mat[res_df$n == i & res_df$spp_scen == ispp,],
ncol = nstrata )
max_mean_idx = which.max(temp_df$tot_mean)
max_var_idx = which.max(temp_df$tot_var)
range_mean = diff(range(temp_df$tot_mean))
range_var = diff(range(temp_df$tot_var))
dist_mean = (temp_df$tot_mean - max(temp_df$tot_mean)) / range_mean
dist_var =  (temp_df$tot_var - max(temp_df$tot_var)) / range_var
comp_idx = which.min(sqrt(dist_mean^2 + dist_var^2))
sol_idx = c(max_mean_idx, comp_idx, max_var_idx)
all_sol[ispp,,] = all_sol[ispp,,] + temp_mat[sol_idx,]
}
}
all_sol = array(data = 0, dim = c(ns+1,3,nstrata))
for(ispp in 1:(ns+1)){
for(i in 5:46){
temp_df = subset(res_df, n == i & spp_scen == ispp)
temp_mat = matrix( res_mat[res_df$n == i & res_df$spp_scen == ispp,],
ncol = nstrata )
max_mean_idx = which.max(temp_df$tot_mean)
max_var_idx = which.max(temp_df$tot_var)
range_mean = diff(range(temp_df$tot_mean))
range_var = diff(range(temp_df$tot_var))
dist_mean = (temp_df$tot_mean - max(temp_df$tot_mean)) / range_mean
dist_var =  (temp_df$tot_var - max(temp_df$tot_var)) / range_var
comp_idx = which.min(sqrt(dist_mean^2 + dist_var^2))
sol_idx = c(max_mean_idx, comp_idx, max_var_idx)
all_sol[ispp,,] = all_sol[ispp,,] + temp_mat[sol_idx,]
}
}
all_sol = array(data = 0, dim = c(ns+1,3,nstrata))
for(ispp in 1:(ns+1)){
all_sol = array(data = 0, dim = c(ns+1,3,nstrata))
for(ispp in 1:(ns+1)){
all_sol = array(data = 0, dim = c(ns+1,3,nstrata))
for(ispp in 1:(ns+1)){
for(i in 5:48 ){
temp_df = subset(res_df, n == i & spp_scen == ispp)
temp_mat = matrix( res_mat[res_df$n == i & res_df$spp_scen == ispp,],
ncol = nstrata )
max_mean_idx = which.max(temp_df$tot_mean)
max_var_idx = which.max(temp_df$tot_var)
range_mean = diff(range(temp_df$tot_mean))
range_var = diff(range(temp_df$tot_var))
dist_mean = (temp_df$tot_mean - max(temp_df$tot_mean)) / range_mean
dist_var =  (temp_df$tot_var - max(temp_df$tot_var)) / range_var
comp_idx = which.min(sqrt(dist_mean^2 + dist_var^2))
sol_idx = c(max_mean_idx, comp_idx, max_var_idx)
all_sol[ispp,,] = all_sol[ispp,,] + temp_mat[sol_idx,]
}
}
all_sol = array(data = 0, dim = c(ns+1,3,nstrata))
for(ispp in 1:(ns+1)){
for(i in 5:50 ){
temp_df = subset(res_df, n == i & spp_scen == ispp)
temp_mat = matrix( res_mat[res_df$n == i & res_df$spp_scen == ispp,],
ncol = nstrata )
max_mean_idx = which.max(temp_df$tot_mean)
max_var_idx = which.max(temp_df$tot_var)
range_mean = diff(range(temp_df$tot_mean))
range_var = diff(range(temp_df$tot_var))
dist_mean = (temp_df$tot_mean - max(temp_df$tot_mean)) / range_mean
dist_var =  (temp_df$tot_var - max(temp_df$tot_var)) / range_var
comp_idx = which.min(sqrt(dist_mean^2 + dist_var^2))
sol_idx = c(max_mean_idx, comp_idx, max_var_idx)
all_sol[ispp,,] = all_sol[ispp,,] + temp_mat[sol_idx,]
}
}
all_sol = array(data = 0, dim = c(ns+1,3,nstrata))
for(ispp in 1:(ns+1)){
for(i in 5:49 ){
temp_df = subset(res_df, n == i & spp_scen == ispp)
temp_mat = matrix( res_mat[res_df$n == i & res_df$spp_scen == ispp,],
ncol = nstrata )
max_mean_idx = which.max(temp_df$tot_mean)
max_var_idx = which.max(temp_df$tot_var)
range_mean = diff(range(temp_df$tot_mean))
range_var = diff(range(temp_df$tot_var))
dist_mean = (temp_df$tot_mean - max(temp_df$tot_mean)) / range_mean
dist_var =  (temp_df$tot_var - max(temp_df$tot_var)) / range_var
comp_idx = which.min(sqrt(dist_mean^2 + dist_var^2))
sol_idx = c(max_mean_idx, comp_idx, max_var_idx)
all_sol[ispp,,] = all_sol[ispp,,] + temp_mat[sol_idx,]
}
}
all_sol[1,,]
plot(temp, col = heat.colors(max(all_sol[1,1,]))[all_sol[1,1,]], border = NA)
plot(temp, col = heat.colors(max(all_sol[1,3,]))[all_sol[1,3,]], border = NA)
plot(temp, col = heat.colors(max(all_sol[1,2,]))[all_sol[1,2,]], border = NA)
plot(temp, col = grey.colors(max(all_sol[1,2,]))[all_sol[1,2,]], border = NA)
###############################
## Spatial Settings for VAST
###############################
rm(list = ls())
library(VAST)
modelno = '3a'
setwd(paste0('C:/Users/zack.oyafuso/Work/GitHub/MS_OM_GoA/VAST_output', modelno))
## Import Data
data = read.csv(file = '../data/data/GOA_multspp.csv')
data = subset(x = data, YEAR > 1990 & YEAR != 2001)
# Prepare the Data-frame for catch-rate data
Data_Geostat = data.frame( "spp"=data$SPECIES_NAME,
"Year"=data$YEAR,
"Catch_KG"=data$WEIGHT,
"AreaSwept_km2"=data$EFFORT,
"Vessel"=0,
"Lat"=data$LATITUDE,
"Lon"=data$LONGITUDE,
"DEPTH" = data$DEPTH,
"DEPTH2" = data$DEPTH2)
#Filter Species
Data_Geostat = subset(x = Data_Geostat,
spp %in% c('Gadus macrocephalus',
'Atheresthes stomias',
'Sebastes alutus',
'Gadus chalcogrammus',
'Hippoglossus stenolepis',
"Hippoglossoides elassodon",
"Microstomus pacificus",
'Glyptocephalus zachirus',
"Anoplopoma fimbria",
"Sebastes variabilis"))
Data_Geostat$spp = droplevels(Data_Geostat$spp)
## Spatial settings: The following settings define the spatial resolution
## for the model, and whether to use a grid or mesh approximation
Method = c("Grid", "Mesh", "Spherical_mesh")[2]
#grid_size_km = 50
n_x = 250   # Specify number of stations (a.k.a. "knots")
## Stratification for results
strata.limits <- data.frame(
'STRATA' = c("All_areas", "west_of_140W"),
'west_border' = c(-Inf, -Inf),
'east_border' = c(Inf, -140)
)
Extrapolation_List = make_extrapolation_info( Region= "Gulf_of_Alaska",
strata.limits = strata.limits )
Spatial_List = make_spatial_info( grid_size_km=sqrt(13.72),
n_x=n_x,
Method=Method,
Lon=Data_Geostat[,'Lon'],
Lat=Data_Geostat[,'Lat'],
Extrapolation_List=Extrapolation_List,
DirPath=getwd(),
Save_Results=F )
rm(data)
