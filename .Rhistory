data <- as.data.frame(rbind(data, rock_soles))
#sum catches of blackspooted and rougheye rocks with rougheye and blackspotted
#rockfish unid.
B_R_rockfishes <- data %>% dplyr::filter(COMMON_NAME %in% c("blackspotted rockfish", "rougheye rockfish", "rougheye and blackspotted rockfish unid.")) %>%
group_by_at(vars(-WEIGHT, -COMMON_NAME, -SPECIES_NAME)) %>%
summarise(WEIGHT = sum(WEIGHT)) %>%
ungroup() %>%
mutate(SPECIES_NAME = "Sebastes B_R", COMMON_NAME = "B_R_rockfishes")
data <- as.data.frame(rbind(data, B_R_rockfishes))
# scale bottom depth, provide depth^2
data$DEPTH = scale(x = log(data$BOTTOM_DEPTH))
data$DEPTH2 = data$DEPTH^2
# Filter species to make it easier to import later
# Filter Species:
# Arrowtooth Flounder (Atherestes stomias, code 10110)
# Pacific Cod (Gadus macrocephalus, code 21720)
# Pacific Ocean Perch (Sebastes alutus, code 30060)
# Sablefish (Anoplopoma fimbria, code 20510)
# Walleye pollock (Gadus chalcogrammus, code 21740)
# Dover sole (Solea solea, code 10180)
# Pacific halibut (Hippoglossus stenolepis, code 10120)
# Flathead sole (Hippoglossoides elassodon, code 10130)
# Rex sole (Glyptocephalus zachirus, code 10200)
# Dusky rockfish (Sebastes variabilis, code 30152)
# Northern rockfish (Sebastes polyspinis, code 30420)
# Rougheye and blackspotted rockfishes (Sebastes aleutianus and Sebastes melanostictus, respectively, codes 30050,30051,30052)
# Northern and Southern rock sole (Lepidopsetta polyxystra and Lepidopseta bilineata, respectivity, codes 10260,10261,10262)
# data = subset(data,
#               COMMON_NAME %in% c('arrowtooth flounder', 'Dover sole',
#                                  'Pacific cod', 'Pacific halibut',
#                                  'Pacific ocean perch', 'rex sole',
#                                  'walleye pollock'))
data = subset(data,
COMMON_NAME %in% c('Pacific ocean perch',
'arrowtooth flounder',
'Pacific cod',
'walleye pollock',
'Pacific halibut',
'rex sole',
'Dover sole',
'flathead sole',
'sablefish',
'dusky rockfish',
'northern rockfish',
"northern rock sole",
"southern rock sole",
'B_R_rockfishes',
'shortspine thornyhead',
'yellowfin sole'))
head*data
head(data)
table(data$YEAR)
table(data$YEAR) / 15
data = subset(data,
COMMON_NAME %in% c('Pacific ocean perch',
'arrowtooth flounder',
'Pacific cod',
'walleye pollock',
'Pacific halibut',
'rex sole',
'Dover sole',
'flathead sole',
# 'sablefish',
'dusky rockfish',
'northern rockfish',
"northern rock sole",
"southern rock sole",
'B_R_rockfishes',
'shortspine thornyhead',
'yellowfin sole'))
table(data$YEAR) / 15
data[800:810,]
data = data[order(data$YEAR),]
data[800:810,]
table(data$YEAR) / 15
table(data$YEAR, data$SPECIES_NAME)
data = data[order(data$YEAR, data$SPECIES_NAME),]
data[800:810,]
table(data$YEAR) / 15
data[(807+764):(807+770),]
data[(807+764):(807+777),]
data[(807+807  ):(807+810 ),]
write.csv(x = data, file = "data/GOA_multspp.csv", row.names = F)
###############################
## Spatial Settings for VAST
###############################
rm(list = ls())
library(VAST)
setwd( 'C:/Users/Zack Oyafuso/Documents/GitHub/MS_OM_GoA/')
modelno = '6j' #6j is going to be same as 6g but resorted
if(!dir.exists(paste0(getwd(), '/VAST_output', modelno, '/'))) {
dir.create(paste0(getwd(), '/VAST_output', modelno, '/'))
}
## Import Data
data = read.csv(file = 'data/data/GOA_multspp.csv')
setwd( 'C:/Users/zack.oyafuso/Work/GitHub/MS_OM_GoA/')
modelno = '6j' #6j is going to be same as 6g but resorted
if(!dir.exists(paste0(getwd(), '/VAST_output', modelno, '/'))) {
dir.create(paste0(getwd(), '/VAST_output', modelno, '/'))
}
## Import Data
data = read.csv(file = 'data/data/GOA_multspp.csv')
data[(807+807  ):(807+810 ),]
data[800:810,]
# Prepare the Data-frame for catch-rate data
Data_Geostat = data.frame( "spp"=data$SPECIES_NAME,
"Year"=data$YEAR,
"Catch_KG"=data$WEIGHT,
"AreaSwept_km2"=data$EFFORT,
"Vessel"=0,
"Lat"=data$LATITUDE,
"Lon"=data$LONGITUDE,
"LOG_DEPTH" = data$DEPTH, #centered log_depth
"LOG_DEPTH2" = data$DEPTH^2 )
rm(data)
#Drop factor levels of unused Species
spp_df = read.csv("spp_df.csv", check.names=F, header = T,
row.names = 'modelno')
which_spp = unlist(spp_df[modelno,])
Data_Geostat = subset(Data_Geostat, spp %in% names(which_spp)[which_spp])
Data_Geostat$spp = droplevels(Data_Geostat$spp)
###############################
## Spatial Settings for VAST
###############################
rm(list = ls())
library(VAST)
setwd( 'C:/Users/Zack Oyafuso/Documents/GitHub/MS_OM_GoA/')
# setwd( 'C:/Users/zack.oyafuso/Work/GitHub/MS_OM_GoA/')
modelno = '6j' #6j is going to be same as 6g but resorted
if(!dir.exists(paste0(getwd(), '/VAST_output', modelno, '/'))) {
dir.create(paste0(getwd(), '/VAST_output', modelno, '/'))
}
## Import Data
data = read.csv(file = 'data/data/GOA_multspp.csv')
# Prepare the Data-frame for catch-rate data
Data_Geostat = data.frame( "spp"=data$SPECIES_NAME,
"Year"=data$YEAR,
"Catch_KG"=data$WEIGHT,
"AreaSwept_km2"=data$EFFORT,
"Vessel"=0,
"Lat"=data$LATITUDE,
"Lon"=data$LONGITUDE,
"LOG_DEPTH" = data$DEPTH, #centered log_depth
"LOG_DEPTH2" = data$DEPTH^2 )
rm(data)
#Drop factor levels of unused Species
spp_df = read.csv("spp_df.csv", check.names=F, header = T,
row.names = 'modelno')
which_spp = unlist(spp_df[modelno,])
Data_Geostat = subset(Data_Geostat, spp %in% names(which_spp)[which_spp])
Data_Geostat$spp = droplevels(Data_Geostat$spp)
## Spatial settings: The following settings define the spatial resolution
## for the model, and whether to use a grid or mesh approximation
Method = c("Grid", "Mesh", "Spherical_mesh")[2]
#grid_size_km = 50
n_x = 350   # Specify number of stations (a.k.a. "knots")
## Stratification for results
strata.limits <- data.frame(
'STRATA' = c("All_areas"),#, "west_of_140W"),
'west_border' = c(-Inf),#, -Inf),
'east_border' = c(Inf)#, -140)
)
Extrapolation_List = make_extrapolation_info( Region= "Gulf_of_Alaska",
strata.limits = strata.limits )
fine_scale = T
Spatial_List = make_spatial_info( n_x=n_x,
Method=Method,
Lon_i=Data_Geostat[,'Lon'],
Lat_i=Data_Geostat[,'Lat'],
Extrapolation_List=Extrapolation_List,
DirPath=paste0(getwd(), '/VAST_output',
modelno, '/'),
fine_scale = fine_scale,
Save_Results=T )
# Add knots to Data_Geostat
Data_Geostat = cbind( Data_Geostat,
"knot_i"=Spatial_List$knot_i )
#plot data points and knots
plot(Spatial_List$latlon_i[,2:1])
points(Spatial_List$latlon_x[,2:1], col = 'red', pch = 16, cex = 1)
save.image(paste0(getwd(), '/VAST_output', modelno, '/Spatial_Settings.RData') )
setwd( 'C:/Users/zack.oyafuso/Work/GitHub/MS_OM_GoA/')
##################################
## Import Libraries
#################################
library(marmap); library(sp); library(RANN); library(raster);
which_machine = c('Zack_MAC'=1, 'Zack_PC' =2, 'Zack_GI_PC'=3)[3]
##################################
## Load Extrapolation Grid used in VAST
#################################
modelno = '6j'
setwd( c('C:/Users/zack.oyafuso/Work/GitHub/MS_OM_GoA/',
'C:/Users/Zack Oyafuso/Documents/GitHub/MS_OM_GoA/')[which_machine] )
setwd( c('',
'C:/Users/Zack Oyafuso/Documents/GitHub/MS_OM_GoA/',
'C:/Users/zack.oyafuso/Work/GitHub/MS_OM_GoA/')[which_machine] )
load(paste0('VAST_output', modelno, '/', 'Spatial_Settings.RData'))
observed_depths = read.csv('data/data/GOA_multspp.csv')$BOTTOM_DEPTH
xmin <- -170
xmax <- -132
ymin <- 52
ymax <- 60.5
bathymap <- getNOAA.bathy(lon1 = xmin, lon2 = xmax,
lat1 = ymin, lat2 = ymax,
resolution = 1)
bathymap <- fortify.bathy(bathymap)
bathymap_coord = sp::SpatialPoints(coords = bathymap[,c('x', 'y')],
proj4string = CRS('+proj=longlat') )
cord.UTM <- sp::spTransform(bathymap_coord, CRS("+proj=utm +zone=5N"))
bathymap[,c('E_km', 'N_km')] = cord.UTM@coords / 1000
#####################
## Asssign bathymetry values of extrapolation cells to the nearest
## value in the bathymetry map
#####################
bathy_idx = RANN::nn2(query=Extrapolation_List$Data_Extrap[,c('E_km','N_km')],
data = bathymap[,c('E_km', 'N_km')],
k = 1)$nn.idx
Extrapolation_List$Data_Extrap$depth = -bathymap$z[bathy_idx[,1]]
#####################
## Plot locations where depths are negative (land?)
#####################
plot(Extrapolation_List$Data_Extrap[,c('E_km', 'N_km')], pch = '.')
points(Extrapolation_List$Data_Extrap[Extrapolation_List$Data_Extrap$depth <=0,c('E_km', 'N_km')], pch = 16, col = 'red')
#####################
## Assign negative bathymetry values (presumably land) to the shallowest
## bathymetry observed in the dataset
#####################
Extrapolation_List$Data_Extrap$depth[Extrapolation_List$Data_Extrap$depth <= min(observed_depths)] = min(observed_depths)
# neg_depths = sum(Extrapolation_List$Data_Extrap$depth <=0)
# k = 2
# while(neg_depths != 0){
#   idxs = which(Extrapolation_List$Data_Extrap$depth <= 0)
#   Extrapolation_List$Data_Extrap$depth[idxs] = -bathymap$z[bathy_idx[idxs,k]]
#   neg_depths = sum(Extrapolation_List$Data_Extrap$depth <=0)
#   k = k + 1
# }
#############################
## Center depth and calculate depth^2
#############################
Extrapolation_List$Data_Extrap$DEPTH = scale(log(Extrapolation_List$Data_Extrap$depth))
Extrapolation_List$Data_Extrap$DEPTH2 = Extrapolation_List$Data_Extrap$DEPTH^2
#############################
## Plot Bathyetry Field
#############################
test = raster::rasterize(
x = Extrapolation_List$Data_Extrap[,c('E_km', 'N_km')],
y = raster(nrows=100, ncols=320,
xmn=min(Extrapolation_List$Data_Extrap$E_km),
xmx=max(Extrapolation_List$Data_Extrap$E_km),
ymn=min(Extrapolation_List$Data_Extrap$N_km),
ymx=max(Extrapolation_List$Data_Extrap$N_km),
crs = CRS("+proj=utm +zone=5N")),
field = Extrapolation_List$Data_Extrap$depth)
par(mar = c(0,0,0,0))
plot(test, axes = F, legend = F)
##########################
## Update Spatial Settings
##########################
Extrapolation_depths = Extrapolation_List$Data_Extrap
save(list = c("Extrapolation_depths"), file = 'Extrapolation_depths.RData')
# Set local working directory (change for your machine)
load("C:/Users/zack.oyafuso/Desktop/VAST_Runs/VAST_output6g/VAST_MS_GoA_Run.RData")
load("C:/Users/zack.oyafuso/Desktop/VAST_Runs/VAST_output6j/Model_Settings.RData")
load("C:/Users/zack.oyafuso/Desktop/VAST_Runs/VAST_output6j/Spatial_Settings.RData")
load("C:/Users/zack.oyafuso/Work/GitHub/MS_OM_GoA/VAST_output6j/Model_Settings.RData")
load("C:/Users/zack.oyafuso/Work/GitHub/MS_OM_GoA/VAST_output6j/Spatial_Settings.RData")
# Load packages
library(TMB)
library(VAST)
# Generate partitions in data
n_fold = 10
#Sort Data_Geostat
row_idx = cbind(matrix(1:nrow(Data_Geostat), ncol = 15))
head(row_idx)
Data_Geostat[1,]
Data_Geostat[c(1,7901),]
tail(row_idx)
#Sort Data_Geostat
test = split.data.frame(Data_Geostat, f = Data_Geostat$Year)
str(test)
str(test$`1996`)
head(test$`1996`)
table(test$`1996`$spp)
test$`1996`[805:810,]
#Sort Data_Geostat
test = split.data.frame(Data_Geostat, f = Data_Geostat$Year)$`1996`
row.idx = matrix(data = 1:nrow(test), nrow = 15)
head(row.idx)
row.idx = matrix(data = 1:nrow(test), ncol = 15)
head(row.idx)
rownames(row.idx)
row.names(row.idx)
sample(row.idx[,1], size = 10, replace = T)
sample(x = 1:n_fold, size = nrow(row.idx), replace = T)
fold_no = sample(x = 1:n_fold, size = nrow(row.idx), replace = T)
table(fold_no)
rownames(test)
#Sort Data_Geostat
Data_Geostat$id = 1:nrow(Data_Geostat)
test = split.data.frame(Data_Geostat, f = Data_Geostat$Year)$`1996`
head(Test)
head(test)
test = split.data.frame(Data_Geostat, f = Data_Geostat$Year)$`2003`
head(test)
row.idx = matrix(data = test$id, ncol = 15)
head(row.idx)
test = split.data.frame(Data_Geostat, f = Data_Geostat$Year)$`1996`
row.idx = matrix(data = test$id, ncol = 15)
fold_no = sample(x = 1:n_fold, size = nrow(row.idx), replace = T)
head(row.idx)
fold_no
test$fold_no = fold_no
head(test)
# Set local working directory (change for your machine)
load("C:/Users/zack.oyafuso/Desktop/VAST_Runs/VAST_output6g/VAST_MS_GoA_Run.RData")
load("C:/Users/zack.oyafuso/Work/GitHub/MS_OM_GoA/VAST_output6j/Model_Settings.RData")
load("C:/Users/zack.oyafuso/Work/GitHub/MS_OM_GoA/VAST_output6j/Spatial_Settings.RData")
# Load packages
library(TMB)
library(VAST)
# Generate partitions in data
n_fold = 10
#Sort Data_Geostat
Data_Geostat$id = 1:nrow(Data_Geostat)
lapply(X = split.data.frame(Data_Geostat, f = Data_Geostat$Year),
FUN = function(test) {
row.idx = matrix(data = test$id, ncol = 15)
fold_no = sample(x = 1:n_fold, size = nrow(row.idx), replace = T)
return(fold_no)
})
sapply(X = split.data.frame(Data_Geostat, f = Data_Geostat$Year),
FUN = function(test) {
row.idx = matrix(data = test$id, ncol = 15)
fold_no = sample(x = 1:n_fold, size = nrow(row.idx), replace = T)
return(fold_no)
})
?sapply
sapply(X = split.data.frame(Data_Geostat, f = Data_Geostat$Year),
FUN = function(test) {
row.idx = matrix(data = test$id, ncol = 15)
fold_no = sample(x = 1:n_fold, size = nrow(row.idx), replace = T)
return(fold_no)
},
simply = 'vector')
sapply(X = split.data.frame(Data_Geostat, f = Data_Geostat$Year),
FUN = function(test) {
row.idx = matrix(data = test$id, ncol = 15)
fold_no = sample(x = 1:n_fold, size = nrow(row.idx), replace = T)
return(fold_no)
},
simplify = 'vector')
sapply(X = split.data.frame(Data_Geostat, f = Data_Geostat$Year),
FUN = function(test) {
row.idx = matrix(data = test$id, ncol = 15)
fold_no = sample(x = 1:n_fold, size = nrow(row.idx), replace = T)
return(fold_no)
},
simplify = T)
sapply(X = split.data.frame(Data_Geostat, f = Data_Geostat$Year),
FUN = function(test) {
row.idx = matrix(data = test$id, ncol = 15)
fold_no = sample(x = 1:n_fold, size = nrow(row.idx), replace = T)
return(fold_no)
},
simplify = F)
lapply(X = split.data.frame(Data_Geostat, f = Data_Geostat$Year),
FUN = function(test) {
row.idx = matrix(data = test$id, ncol = 15)
fold_no = sample(x = 1:n_fold, size = nrow(row.idx), replace = T)
return(fold_no)
})
foldno = lapply(X = split.data.frame(Data_Geostat, f = Data_Geostat$Year),
FUN = function(test) {
row.idx = matrix(data = test$id, ncol = 15)
fold_no = sample(x = 1:n_fold,
size = nrow(row.idx),
replace = T)
return(fold_no)
})
unlist(foldno)
as.integer(unlist(foldno))
Data_Geostat$foldno = as.integer(unlist(foldno))
table(Data_Geostat$spp, Data_Geostat$foldno)
table(Data_Geostat$Year, Data_Geostat$foldno)
table(Data_Geostat$Year, Data_Geostat$spp)
str(foldno)
length(as.integer(unlist(foldno)))
foldno = lapply(X = split.data.frame(Data_Geostat, f = Data_Geostat$Year),
FUN = function(test) {
row.idx = matrix(data = test$id, ncol = 15)
fold_no = sample(x = 1:n_fold,
size = nrow(row.idx),
replace = T)
return(row.idx[fold_no,])
})
str(foldno)
str(foldno$`1996`)
head(foldno$`1996`)
test = split.data.frame(Data_Geostat, f = Data_Geostat$Year)$`1996`
row.idx = matrix(data = test$id, ncol = 15)
fold_no = sample(x = 1:n_fold,
size = nrow(row.idx),
replace = T)
fold_no
head(row.idx)
fold_no
head(row.idx)
?split()
?split()
str(test)
fold_no
split(test, fold_no)
fold_no
split(row.idx, fold_no)
# Set local working directory (change for your machine)
load("C:/Users/zack.oyafuso/Desktop/VAST_Runs/VAST_output6g/VAST_MS_GoA_Run.RData")
load("C:/Users/zack.oyafuso/Work/GitHub/MS_OM_GoA/VAST_output6j/Model_Settings.RData")
load("C:/Users/zack.oyafuso/Work/GitHub/MS_OM_GoA/VAST_output6j/Spatial_Settings.RData")
# Load packages
library(TMB)
library(VAST)
# Generate partitions in data
n_fold = 10
#Sort Data_Geostat
Data_Geostat$id = 1:nrow(Data_Geostat)
foldno = lapply(X = split.data.frame(Data_Geostat, f = Data_Geostat$Year),
FUN = function(test) {
row.idx = matrix(data = test$id, ncol = 15)
fold_no = sample(x = 1:n_fold,
size = nrow(row.idx),
replace = T)
return(split(row.idx, fold_no))
})
str(foldno)
str(foldno)
lapply(X = foldno,
FUN = function(test){
lapply(test, FUN = function(x) Data_Geostat[x,])
})
test = lapply(X = foldno,
FUN = function(test){
lapply(test, FUN = function(x) Data_Geostat[x,])
})
str(test)
names(tes)
names(test)
str(test$`1996`)
test = lapply(X = foldno,
FUN = function(test){
lapply(test,
FUN = function(x) cbind(Data_Geostat[x,],
rep(names(test), nrow(test))))
})
names(foldno)
names(foldno$`1996`)
test = lapply(X = foldno,
FUN = function(test){
lapply(test, FUN = function(x) Data_Geostat[x,])
})
str(test$`1996`)
test = lapply(X = foldno,
FUN = function(test){
lapply(test, FUN = function(x) Data_Geostat$id[x])
})
test
str(test$`1996`)
str(test)
test[[iyear]]
for(iyear in names(test)){
for(ifold in paste(1:10)){
test[[iyear]]
}
}
test[[iyear]]
test[[iyear]][[ifold]]
ifold
for(iyear in names(test)){
for(ifold in paste(1:10)){
Data_Geostat[test[[iyear]][[ifold]],'fold'] = as.integer(ifold)
}
}
head(Data_Geostat)
with(Data_Geostat, table(spp, Year, fold))
with(Data_Geostat, table(spp, Year, fold))
with(Data_Geostat, table(spp, Year, fold))[,,'fold = 10']
str(with(Data_Geostat, table(spp, Year, fold)))
with(Data_Geostat, table(spp, Year, fold))[,,10]
with(Data_Geostat, table(spp, Year, fold))[,,9:10]
with(Data_Geostat, table(spp, Year, fold))[,,8]
with(Data_Geostat, table(spp, Year, fold))[,,7]
Data_Geostat$id = 1:nrow(Data_Geostat)
foldno = lapply(X = split.data.frame(Data_Geostat, f = Data_Geostat$Year),
FUN = function(test) {
row.idx = matrix(data = test$id, ncol = 15)
fold_no = sample(x = 1:n_fold,
size = nrow(row.idx),
replace = T)
return(split(row.idx, fold_no))
})
test = lapply(X = foldno,
FUN = function(test){
lapply(test, FUN = function(x) Data_Geostat$id[x])
})
for(iyear in names(test)){
for(ifold in paste(1:10)){
Data_Geostat[test[[iyear]][[ifold]],'fold'] = as.integer(ifold)
}
}
head(Data_Geostat)
lapply(split(Data_Geostat, Data_Geostat$Year), FUN = function(x) table(x$fold))
lapply(split(Data_Geostat, Data_Geostat$Year), FUN = function(x) table(x$fold, x$spp))
lapply(split(Data_Geostat, Data_Geostat$Year), FUN = function(x) table(x$fold, x$spp))
