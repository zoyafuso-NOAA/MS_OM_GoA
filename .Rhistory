kappa=1,
writeFiles = FALSE,
showPlot = T,
parallel = FALSE)
set.seed(1234)
solution <- optimStrata (
method = "spatial",
errors=cv,
framesamp=frame,
iter = 15,
pops = 10,
nStrata = 5,
fitting = c(summary(lm_lead)$r.square,summary(lm_zinc)$r.square),
range = c(kriging_lead$var_model$range[2],kriging_zinc$var_model$range[2]),
kappa=1,
writeFiles = FALSE,
showPlot = TRUE
,
parallel = TRUE)
?optimStrata
# library(devtools)
# devtools::install_local('C:/Users/zack.oyafuso/Downloads/SamplingStrata-master/', force = T)
library(SamplingStrata)
library(sp)
data("meuse")# locations (155 observed points)
data("meuse.grid")# grid of points (3103)
library(gstat)
library(automap)
meuse.grid$id <- c(1:nrow(meuse.grid))
coordinates(meuse)<-c("x","y")
coordinates(meuse.grid)<-c("x","y")
#Spatiotemporal Model
lm_lead <- lm(log(lead) ~ dist,data=meuse)
lm_zinc <- lm(log(zinc) ~ dist,data=meuse)
#Get values across sampling grid via kriging
kriging_lead = autoKrige(log(lead) ~ dist, meuse, meuse.grid)
kriging_zinc = autoKrige(log(zinc) ~ dist, meuse, meuse.grid)
#Create df with metal predictions and varainces across the domain
df <- NULL
df$id <- meuse.grid$id
df$lead.pred <- kriging_lead$krige_output@data$var1.pred
df$lead.var <- kriging_lead$krige_output@data$var1.var
df$zinc.pred <- kriging_zinc$krige_output@data$var1.pred
df$zinc.var <- kriging_zinc$krige_output@data$var1.var
df$lon <- meuse.grid$x
df$lat <- meuse.grid$y
df$dom1 <- 1
df <- as.data.frame(df)
head(df)
# Produce optimal stratification of the 3,103 points under a precision
# constraint of 1% on the target estimates
frame <- buildFrameSpatial(df=df,
id="id",
X=c("lead.pred","zinc.pred"),
Y=c("lead.pred","zinc.pred"),
variance=c("lead.var","zinc.var"),
lon="lon",
lat="lat",
domainvalue = "dom1")
cv <- as.data.frame(list(DOM=rep("DOM1",1),
CV1=rep(0.01,1),
CV2=rep(0.01,1),
domainvalue=c(1:1) ))
set.seed(1234)
solution <- optimStrata (
method = "spatial",
errors=cv,
framesamp=frame,
iter = 15,
pops = 10,
nStrata = 5,
fitting = c(summary(lm_lead)$r.square,summary(lm_zinc)$r.square),
range = c(kriging_lead$var_model$range[2],kriging_zinc$var_model$range[2]),
kappa=1,
writeFiles = FALSE,
showPlot = TRUE,
parallel = TRUE)
set.seed(1234)
solution <- optimStrata (
method = "spatial",
errors=cv,
framesamp=frame,
iter = 15,
pops = 10,
mut_chance = 0.01,
nStrata = 5,
fitting = c(summary(lm_lead)$r.square,summary(lm_zinc)$r.square),
range = c(kriging_lead$var_model$range[2],kriging_zinc$var_model$range[2]),
kappa=1,
writeFiles = FALSE,
showPlot = TRUE,
parallel = TRUE)
set.seed(1234)
solution <- optimStrata (
method = "spatial",
errors=cv,
framesamp=frame,
iter = 15,
pops = 10,
mut_chance = 0.25,
nStrata = 5,
fitting = c(summary(lm_lead)$r.square,summary(lm_zinc)$r.square),
range = c(kriging_lead$var_model$range[2],kriging_zinc$var_model$range[2]),
kappa=1,
writeFiles = FALSE,
showPlot = TRUE,
parallel = TRUE)
#Save Results
framenew <- solution$framenew
outstrata <- solution$aggr_strata
#Plot resuts
frameres <- SpatialPointsDataFrame(data=framenew, coords=cbind(framenew$LON,framenew$LAT) )
frameres2 <- SpatialPixelsDataFrame(points=frameres[c("LON","LAT")], data=framenew)
frameres2$LABEL <- as.factor(frameres2$LABEL)
spplot(frameres2,c("LABEL"), col.regions=bpy.colors(5))
set.seed(1234)
solution <- optimStrata (
method = "spatial",
errors=cv,
framesamp=frame,
iter = 15,
pops = 10,
mut_chance = 0.5,
nStrata = 5,
fitting = c(summary(lm_lead)$r.square,summary(lm_zinc)$r.square),
range = c(kriging_lead$var_model$range[2],kriging_zinc$var_model$range[2]),
kappa=1,
writeFiles = FALSE,
showPlot = TRUE,
parallel = TRUE)
solution <- optimStrata (
method = "spatial",
errors=cv,
framesamp=frame,
iter = 15,
pops = 20,
mut_chance = 0.5,
nStrata = 5,
fitting = c(summary(lm_lead)$r.square,summary(lm_zinc)$r.square),
range = c(kriging_lead$var_model$range[2],kriging_zinc$var_model$range[2]),
kappa=1,
writeFiles = FALSE,
showPlot = TRUE,
parallel = TRUE)
#Save Results
framenew <- solution$framenew
outstrata <- solution$aggr_strata
#Plot resuts
frameres <- SpatialPointsDataFrame(data=framenew, coords=cbind(framenew$LON,framenew$LAT) )
frameres2 <- SpatialPixelsDataFrame(points=frameres[c("LON","LAT")], data=framenew)
frameres2$LABEL <- as.factor(frameres2$LABEL)
spplot(frameres2,c("LABEL"), col.regions=bpy.colors(5))
solution$aggr_strata
solution$framenew
solution$aggr_strata
solution$indices
strataStructure <- summaryStrata(solution3$framenew,
solution3$aggr_strata,
progress=FALSE)
strataStructure
strataStructure <- summaryStrata(solution$framenew,
solution$aggr_strata,
progress=FALSE)
strataStructure
11/470
?optimStrata
set.seed(1234)
solution <- optimStrata (
method = "spatial",
errors=cv,
framesamp=frame,
iter = 15,
pops = 20,
mut_chance = 2,
nStrata = 5,
fitting = c(summary(lm_lead)$r.square,summary(lm_zinc)$r.square),
range = c(kriging_lead$var_model$range[2],kriging_zinc$var_model$range[2]),
kappa=1,
writeFiles = FALSE,
showPlot = TRUE,
parallel = TRUE)
expected_CV(solution$aggr_strata)
expected_CV(solution$aggr_strata)
#Save Results
framenew <- solution$framenew
outstrata <- solution$aggr_strata
strataStructure <- summaryStrata(solution$framenew,
solution$aggr_strata,
progress=FALSE)
strataStructure
#Plot resuts
frameres <- SpatialPointsDataFrame(data=framenew, coords=cbind(framenew$LON,framenew$LAT) )
frameres2 <- SpatialPixelsDataFrame(points=frameres[c("LON","LAT")], data=framenew)
frameres2$LABEL <- as.factor(frameres2$LABEL)
spplot(frameres2,c("LABEL"), col.regions=bpy.colors(5))
set.seed(1234)
solution <- optimStrata (
method = "spatial",
errors=cv,
framesamp=frame,
iter = 15,
pops = 20,
mut_chance = 50,
nStrata = 5,
fitting = c(summary(lm_lead)$r.square,summary(lm_zinc)$r.square),
range = c(kriging_lead$var_model$range[2],kriging_zinc$var_model$range[2]),
kappa=1,
writeFiles = FALSE,
showPlot = TRUE,
parallel = TRUE)
expected_CV(solution$aggr_strata)
#Save Results
framenew <- solution$framenew
outstrata <- solution$aggr_strata
strataStructure <- summaryStrata(solution$framenew,
solution$aggr_strata,
progress=FALSE)
strataStructure
#Plot resuts
frameres <- SpatialPointsDataFrame(data=framenew, coords=cbind(framenew$LON,framenew$LAT) )
frameres2 <- SpatialPixelsDataFrame(points=frameres[c("LON","LAT")], data=framenew)
frameres2$LABEL <- as.factor(frameres2$LABEL)
spplot(frameres2,c("LABEL"), col.regions=bpy.colors(5))
#Settings for optimizer
settings = expand.grid(cv = c(0.3),
mut_change = c(0.01, 0.1),
elitism_rate = c(0.1),
dom1 = 2:5,
dom2 = 2:5,
dom3 = 2:5,
dom4 = 2:5,
dom5 = 2:5)
2948*10
2948*10 / 60
2948*10 / 60 / 24
#Settings for optimizer
settings = expand.grid(cv = c(0.3),
mut_change = c(0.01),
elitism_rate = c(0.1),
dom1 = 2:5,
dom2 = 2:5,
dom3 = 2:5,
dom4 = 2:5,
dom5 = 2:5)
1024 * 10
1024 * 10 / 60 / 24
#################################
## Parallelize the Optimization Process
## Method == "continous"
#################################
rm(list = ls())
library(VAST);
library(mvtnorm); library(SamplingStrata); library(sp)
library(RColorBrewer); library(raster)
which_machine = c('Zack_MAC'=1, 'Zack_PC' =2, 'Zack_GI_PC'=3)[2]
which_machine = c('Zack_MAC'=1, 'Zack_PC' =2, 'Zack_GI_PC'=3)[3]
VAST_wd = c('/Users/zackoyafuso/Google Drive/VAST_Runs/',
'C:/Users/Zack Oyafuso/Google Drive/VAST_Runs/',
'C:/Users/zack.oyafuso/Work/GitHub/MS_OM_GoA/')[which_machine]
VAST_wd = c('/Users/zackoyafuso/Google Drive/VAST_Runs/',
'C:/Users/Zack Oyafuso/Google Drive/VAST_Runs/',
'C:/Users/zack.oyafuso/Work/GitHub/MS_OM_GoA/')[which_machine]
VAST_model = "6d"
output_wd = c(paste0('/Users/zackoyafuso/Documents/GitHub/MS_OM_GoA/',
'Optimum_Allocation/model_', VAST_model),
paste0("C:/Users/Zack Oyafuso/Documents/GitHub/MS_OM_GoA/",
"Optimum_Allocation/model_", VAST_model),
paste0("C:/Users/zack.oyafuso/Work/GitHub/MS_OM_GoA/",
"Optimum_Allocation/model_", VAST_model))[which_machine]
setwd(VAST_wd)
output_wd
if(!dir.exists(output_wd)) dir.create(output_wd)
load(paste0(VAST_wd, 'VAST_output',VAST_model,'/VAST_MS_GoA_Run.RData'))
load(paste0(VAST_wd, 'VAST_output',VAST_model,'/Spatial_Settings.RData'))
load(paste0(c('/Users/zackoyafuso/Documents/GitHub/MS_OM_GoA/',
"C:/Users/Zack Oyafuso/Documents/GitHub/MS_OM_GoA/",
'C:/Users/zack.oyafuso/Work/GitHub/MS_OM_GoA/'),
'Extrapolation_depths.RData')[which_machine])
Year_Set = seq(min(Data_Geostat[,'Year']),max(Data_Geostat[,'Year']))
Years2Include = which( Year_Set %in% sort(unique(Data_Geostat[,'Year'])))
NTime = length(Years2Include)
df = df_raw = NULL
df = cbind(
data.frame(Domain = cut(x = Extrapolation_depths$Lon,
breaks = c(-171, -159, -154, -147, -140, -130),
labels = c('Shumagin_1', 'Chirikof_2', 'Kodiak_3',
'Yakutak_4', 'SE_5')),
x = 1:Save$TmbData$n_g,
lat = Extrapolation_depths$N_km,
lon = Extrapolation_depths$E_km - min(Extrapolation_depths$E_km),
depth = Extrapolation_depths$depth),
apply(X=Save$Report$Index_gcyl[,,Years2Include,], MARGIN = 1:2, FUN = mean ) )
names(df)[-(1:5)] = gsub(x = Save$Spp, pattern = ' ', replacement = '_')
frame <- buildFrameDF(df = df,
id = "x",
X = c("depth"),#, 'lon'),
Y = gsub(x = Save$Spp, pattern = ' ', replacement = '_'),
domainvalue = "Domain")
for(iT in 1:NTime){
df_raw = rbind(df_raw, cbind(
data.frame(Domain = cut(x = Extrapolation_depths$Lon,
breaks = c(-171, -159, -154, -147, -140, -130),
labels = paste(1:5)),
x = 1:Save$TmbData$n_g,
year = iT,
lat = Extrapolation_depths$N_km,
lon = Extrapolation_depths$E_km - min(Extrapolation_depths$E_km),
depth = Extrapolation_depths$depth),
Save$Report$Index_gcyl[,,Years2Include[iT],] )
)
}
names(df_raw)[-(1:6)] = gsub(x = Save$Spp, pattern = ' ', replacement = '_')
frame_raw <- buildFrameDF(df = df_raw,
id = "x",
X = c("depth"),#, 'lon'),
Y = gsub(x = Save$Spp, pattern = ' ', replacement = '_'),
domainvalue = "Domain")
#Settings for optimizer
settings = expand.grid(cv = c(0.3),
mut_change = c(0.01),
elitism_rate = c(0.1),
dom1 = 2:5,
dom2 = 2:5,
dom3 = 2:5,
dom4 = 2:5,
dom5 = 2:5)
ns = Save$TmbData$n_c
domains = unique(df$Domain)
ndom = length(unique(frame$domainvalue))
which_runs = list(c(1:1000),
c(1001:5000),
c(5001:nrow(settings)))[which_machine]
rm(which_runs)
i=1
cv = list()
for(spp in 1:ns) cv[[paste0('CV', spp)]] = rep(settings$cv[i], ndom)
cv[['DOM']] = levels(domains)
cv[['domainvalue']] = as.numeric(domains)
cv <- as.data.frame(cv)
set.seed(1234 + i)
cv
unlist(settings[i, paste0('dom',1:ndom)])
buildStrataDF
solution <- optimStrata(method = "continuous",
errors = cv,
framesamp = frame,
iter = 20,
pops = 10,
elitism_rate = settings$elitism_rate[i],
mut_chance = settings$mut_change[i],
# nStrata = rep(3, ndom),
nStrata = unlist(settings[i, paste0('dom',1:ndom)]),
showPlot = F,
parallel = T)
strataStructure <- summaryStrata(solution$framenew,
solution$aggr_strata,
progress=FALSE)
solution <- optimStrata(method = "continuous",
errors = cv,
framesamp = frame,
iter = 50,
pops = 50,
elitism_rate = settings$elitism_rate[i],
mut_chance = settings$mut_change[i],
# nStrata = rep(3, ndom),
nStrata = unlist(settings[i, paste0('dom',1:ndom)]),
showPlot = F,
parallel = T)
8 * 1024
8 * 1024 / 24
8 * 1024 / 60
8 * 1024 / 60 / 24
strataStructure <- summaryStrata(solution$framenew,
solution$aggr_strata,
progress=FALSE)
strataStructure
nrow(Extrapolation_depths)
res_df = matrix(id = 1:nrow(Extrapolation_depths), ncol = 1)
res_df = matrix(1:nrow(Extrapolation_depths), ncol = 1)
res_df = matrix(1:nrow(Extrapolation_depths), ncol = 1, dimnames = list(NULL, 'id'))
head(res_df)
solution$aggr_strata
solution$indices
str(solution$indices)
head(frame)
res_df = as.matrix(frame[,c('id', 'domainvalue')])
head(res_df)
tail(res_df)
unique(res_df[,'domainvalue'])
table(res_df[,'domainvalue'])
cbind(res_df, solution$indices$X1)
cbind(res_df, assign(value = solution$indices$X1, x = paste0('iter', i)))
res_df = cbind(res_df, assign(value = solution$indices$X1, x = paste0('iter', i)))
head(res_df)
assign(value = solution$indices$X1, x = paste0('iter', i))
res_df = cbind(res_df, paste0('iter', i))
head(res_df)
res_df = cbind(res_df, get(paste0('iter', i)))
head(res_df)
res_df = cbind(res_df, solution$indices$X1)
head(res_df)
res_df = as.matrix(frame[,c('id', 'domainvalue')])
res_df = cbind(res_df, solution$indices$X1)
head(res_df)
table(res_df[,2], res_df[,3])
colSums(table(res_df[,2], res_df[,3]))
strata_list = list()
strata_list = list(strata_list, summaryStrata(solution$framenew,
solution$aggr_strata,
progress=FALSE) )
strata_list
strata_list = NULL
strata_list = list(strata_list, summaryStrata(solution$framenew,
solution$aggr_strata,
progress=FALSE) )
strata_list
strata_list = NULL
strata_list = list()
strata_list[[i]] = list(strata_list, summaryStrata(solution$framenew,
solution$aggr_strata,
progress=FALSE) )
strata_list
strataStructure
str(strataStructure)
strata_list = list()
strata_list[i] = list(strata_list, summaryStrata(solution$framenew,
solution$aggr_strata,
progress=FALSE) )
strata_list[i] =  summaryStrata(solution$framenew,
solution$aggr_strata,
progress=FALSE)
strata_list = list()
strata_list[i] =  summaryStrata(solution$framenew,
solution$aggr_strata,
progress=FALSE)
strata_list[] =  summaryStrata(solution$framenew,
solution$aggr_strata,
progress=FALSE)
strata_list[[i]] =  summaryStrata(solution$framenew,
solution$aggr_strata,
progress=FALSE)
strata_list
res_df = as.matrix(frame[,c('id', 'domainvalue')])
strata_list = list()
for(i in 1:3){
par(mfrow = c(3,2))
#   wd = paste0("C:/Users/Zack Oyafuso/Documents/",
#               "GitHub/MS_OM_GoA/Optimum_Allocation/",
#               "model_", VAST_model, "/",
#               'cv_', settings$cv[i], '_',
#               'mut_change_', settings$mut_change[i], '_',
#               'elitism_rate_', settings$elitism_rate[i], '.RData')
# i=1
cv = list()
for(spp in 1:ns) cv[[paste0('CV', spp)]] = rep(settings$cv[i], ndom)
cv[['DOM']] = levels(domains)
cv[['domainvalue']] = as.numeric(domains)
cv <- as.data.frame(cv)
set.seed(1234 + i)
solution <- optimStrata(method = "continuous",
errors = cv,
framesamp = frame,
iter = 20,
pops = 20,
elitism_rate = settings$elitism_rate[i],
mut_chance = settings$mut_change[i],
# nStrata = rep(3, ndom),
nStrata = unlist(settings[i, paste0('dom',1:ndom)]),
showPlot = F,
parallel = T)
strata_list[[i]] =  summaryStrata(solution$framenew,
solution$aggr_strata,
progress=FALSE)
res_df = cbind(res_df, solution$indices$X1)
# save(list=c('strataStructure', 'solution'), file = wd)
}
i
i %% 3
wd
paste0('model_', modelno)
if(i %% 3 == 0) save(list = c('strata_list', 'res_df'),
file = paste0('model_', modelno, '/optimization.RData'))
if(i %% 3 == 0) save(list = c('strata_list', 'res_df'),
file = paste0('Optimum_Allocation/model_', modelno, '/optimization.RData'))
plot(0, type = 'n', axes = F, ann = F)
text(0,0, paste('Iteration', i))
text(1,1, paste('Iteration', i))
text(1,1, paste('Iteration', i), cex = 2)
text(1,1, paste('Iteration', i), cex = 1.5)
plot_this = i%%5 == 0
plot_this
nrow(settings)
#Settings for optimizer
settings = expand.grid(cv = c(0.3),
mut_change = c(0.01),
elitism_rate = c(0.1),
dom1 = 2:4,
dom2 = 2:4,
dom3 = 2:4,
dom4 = 2:4,
dom5 = 2:4)
nrow(settings)
#Settings for optimizer
settings = expand.grid(cv = c(0.3),
mut_change = c(0.01, 0.1),
elitism_rate = c(0.1, 0.2),
dom1 = 2:4,
dom2 = 2:4,
dom3 = 2:4,
dom4 = 2:4,
dom5 = 2:4)
nrow(settings)
