stratano =  res_df[sample_vec,idx]
sample_df = subset(frame_raw, year == iyear)[sample_vec,]
sample_df
#Calculate Stratum Mean Density and Variance
stmt = paste0('aggregate(cbind(',
paste0('Y', 1:(ns-1), sep = ',', collapse = ''), 'Y',ns,
") ~ stratano, data = sample_df, FUN = mean)")
sample_mean = eval(parse(text = stmt))[,-1]
stmt = paste0('aggregate(cbind(',
paste0('Y', 1:(ns-1), sep = ',', collapse = ''), 'Y',ns,
") ~ stratano, data = sample_df, FUN = var)")
#Calculate Stratum Mean Density and Variance
stmt = paste0('aggregate(cbind(',
paste0('Y', 1:(ns-1), sep = ',', collapse = ''), 'Y',ns,
") ~ stratanos, data = sample_df, FUN = mean)")
sample_mean = eval(parse(text = stmt))[,-1]
stratanos
stratanos
stratano =  stratanos[sample_vec]
stratano
stable(stratano)
table(stratano)
stratano_samp =  stratanos[sample_vec]
#Calculate Stratum Mean Density and Variance
stmt = paste0('aggregate(cbind(',
paste0('Y', 1:(ns-1), sep = ',', collapse = ''), 'Y',ns,
") ~ stratano_samp, data = sample_df, FUN = mean)")
sample_mean = eval(parse(text = stmt))[,-1]
stmt = paste0('aggregate(cbind(',
paste0('Y', 1:(ns-1), sep = ',', collapse = ''), 'Y',ns,
") ~ stratano_samp, data = sample_df, FUN = var)")
sample_var = eval(parse(text = stmt))[,-1]
sample_mean
sample_var
#How many samples are allocated in each strata
#How many sampling units are in each strata
Wh = stratapop/N
wh = strata_allocation/stratapop
Wh
wh
#Calculate Total Abundance and Variance, calculate CV
SRS_var = colSums(sweep(x = sample_var, MARGIN = 1,
STATS = (Wh)^2*(1-wh)/strata_allocation,
FUN = '*'))
stratapop / N
Wh
SRS_mean = colSums(sweep(x = sample_mean, MARGIN = 1,
STATS = Wh,
FUN = '*'))
SRS_mean
strata_cv = sqrt(SRS_var) / SRS_mean
strata_cv
#Record mean and CV values
sim_mean[paste0('Year_',iyear),,istrata,isample,iter] = SRS_mean
#################
# true density
#################
stmt = paste0('aggregate(cbind(',
paste0('Y', 1:(ns-1), sep = ',', collapse = ''), 'Y',ns,
") ~ year, data = frame_raw, FUN = mean)")
true_mean = eval(parse(text = stmt))[,-1]
colnames(true_mean) = sci_names
sim_mean = sim_cv = array(dim = c(NTime, ns, Nstrata, 3, Niters),
dimnames = list(paste0('Year_', 1:NTime),
sci_names,
NULL,
NULL))
Nstrata = length(stratas)
#################
# true density
#################
stmt = paste0('aggregate(cbind(',
paste0('Y', 1:(ns-1), sep = ',', collapse = ''), 'Y',ns,
") ~ year, data = frame_raw, FUN = mean)")
true_mean = eval(parse(text = stmt))[,-1]
colnames(true_mean) = sci_names
sim_mean = sim_cv = array(dim = c(NTime, ns, Nstrata, 3, Niters),
dimnames = list(paste0('Year_', 1:NTime),
sci_names,
NULL,
NULL))
NStrata
true_mean[,1]
true_mean[1,]
SRS_mean
#Record mean and CV values
sim_mean[paste0('Year_',iyear),,istrata,isample,iter] = SRS_mean
sim_cv[paste0('Year_',iyear),,istrata,isample,iter] = strata_cv
print(paste0('Finished with: ', strata[istrata], ' Strata and ',
isample, ' Boat'))
print(paste0('Finished with: ', stratas[istrata], ' Strata and ',
isample, ' Boat'))
for(istrata in 1:Nstrata){
temp_strata = paste0('Str_', stratas[istrata])
runs = grep(x = dir(paste0(output_wd, '/Flexible_Optimization'),
full.names = T),
pattern = paste0('Thres20Str', stratas[istrata]),
value = T)
nruns = length(runs)
if(nruns != 0){
for(irun in 1:nruns){
load( paste0(runs[irun], '/result_list.RData') )
samplesizes[[temp_strata]] = c(samplesizes[[temp_strata]],
result_list$n)
}
}
else(samplesizes[[temp_strata]] = NA)
}
sim_mean = sim_cv = array(dim = c(NTime, ns, Nstrata, 3, Niters),
dimnames = list(paste0('Year_', 1:NTime),
sci_names,
NULL,
NULL))
##########################
## Which Runs to use for each strata and sample size
##########################
samplesizes = list()
for(istrata in 1:Nstrata){
temp_strata = paste0('Str_', stratas[istrata])
runs = grep(x = dir(paste0(output_wd, '/Flexible_Optimization'),
full.names = T),
pattern = paste0('Thres20Str', stratas[istrata]),
value = T)
nruns = length(runs)
if(nruns != 0){
for(irun in 1:nruns){
load( paste0(runs[irun], '/result_list.RData') )
samplesizes[[temp_strata]] = c(samplesizes[[temp_strata]],
result_list$n)
}
}
else(samplesizes[[temp_strata]] = NA)
}
##########################
## Simulating each optimization
##########################
for(istrata in c(1,9)){
for(isample in 1) {
temp_run = which.min(abs(samplesizes[[istrata]]-c(280,550,820)[isample]))
temp_dir = paste0(output_wd, '/Flexible_Optimization/Thres20Str',
stratas[istrata], 'Run', temp_run)
load(paste0(temp_dir, '/result_list.RData'))
strata_list = result_list[[2]]
strata_allocation = strata_list$Allocation
stratapop = strata_list$Population
stratanos = result_list[[1]]$indices$X1
for(iyear in 1:NTime){
for(iter in 1:Niters){
#Sample based on the stratification allocations
sample_vec = c()
for(i in 1:nrow(strata_list) ){
available_cells = which(stratanos == i)
sample_cells = sample(x = available_cells,
size = strata_allocation[i],
replace = F)
sample_vec = c(sample_vec, sample_cells)
}
#Organize sample set and total number of samples
sample_vec = sort(sample_vec)
n = length(sample_vec)
stratano_samp =  stratanos[sample_vec]
sample_df = subset(frame_raw, year == iyear)[sample_vec,]
#Calculate Stratum Mean Density and Variance
stmt = paste0('aggregate(cbind(',
paste0('Y', 1:(ns-1), sep = ',', collapse = ''), 'Y',ns,
") ~ stratano_samp, data = sample_df, FUN = mean)")
sample_mean = eval(parse(text = stmt))[,-1]
stmt = paste0('aggregate(cbind(',
paste0('Y', 1:(ns-1), sep = ',', collapse = ''), 'Y',ns,
") ~ stratano_samp, data = sample_df, FUN = var)")
sample_var = eval(parse(text = stmt))[,-1]
#How many samples are allocated in each strata
#How many sampling units are in each strata
Wh = stratapop/N
wh = strata_allocation/stratapop
#Calculate Total Abundance and Variance, calculate CV
SRS_var = colSums(sweep(x = sample_var, MARGIN = 1,
STATS = (Wh)^2*(1-wh)/strata_allocation,
FUN = '*'))
SRS_mean = colSums(sweep(x = sample_mean, MARGIN = 1,
STATS = Wh,
FUN = '*'))
strata_cv = sqrt(SRS_var) / SRS_mean
#Record mean and CV values
sim_mean[paste0('Year_',iyear),,istrata,isample,iter] = SRS_mean
sim_cv[paste0('Year_',iyear),,istrata,isample,iter] = strata_cv
}
}
print(paste0('Finished with: ', stratas[istrata], ' Strata and ',
isample, ' Boat'))
}
}
#################################
## Simulation Metrics
#################################
#True CV, Cv of Cv, Rrmse of Cv
true_cv_array = rrmse_est_array = rrmse_cv_array =
array(dim = c(NTime, ns, Nstrata, 3),
dimnames = list(paste0('Year_', 1:NTime), sci_names, NULL, NULL ))
for(iyear in 1:NTime){
for(istrata in 1:Nstrata){
for(isample in 1:3){
for(spp in sci_names){
iter_est = sim_mean[paste0('Year_', iyear),spp,istrata,isample,]
iter_cv = sim_cv[paste0('Year_', iyear), spp, istrata,isample, ]
true_cv = sd(iter_est) / true_mean[iyear, spp]
true_cv_array[paste0('Year_', iyear),spp,istrata,isample] = true_cv
rrmse_cv_array[paste0('Year_', iyear), spp, istrata,isample] =
sqrt(mean((iter_cv-true_cv)^2)) / mean(iter_cv)
rrmse_est_array[paste0('Year_', iyear), spp, istrata,isample] =
sqrt(mean((iter_est-true_mean[iyear,spp])^2))/
true_mean[iyear,spp]
}
}
}
}
true_cv_array
true_cv_array[,15,1,1]
boxplot(true_cv_array[,15,1,1])
boxplot(true_cv_array[,,1,1])
par(mar = c(3,12,1,1))
boxplot(true_cv_array[,,1,1])
boxplot(true_cv_array[,,1,1], horizontal = TRUE)
boxplot(true_cv_array[,,1,1], horizontal = TRUE, las = 1)
boxplot(true_cv_array[,,1,1], horizontal = TRUE, las = 1, ylim = c(0,0.4))
boxplot(true_cv_array[,,1,1], horizontal = TRUE, las = 1, ylim = c(0,0.5))
boxplot(rrmse_est_array[,,1,1], horizontal = TRUE, las = 1, ylim = c(0,0.5))
boxplot(rrmse_cv_array[,,1,1], horizontal = TRUE, las = 1, ylim = c(0,0.5))
boxplot(true_cv_array[,,1,1], horizontal = TRUE, las = 1, ylim = c(0,0.5))
#######################
## Save results
#######################
for(ivar in  c('rrmse_est_array', 'rrmse_cv_array', 'true_cv_array',
'sim_mean', 'sim_cv')){
assign(x=paste0('STRS_', ivar), value = get(ivar))
}
#######################
## Save results
#######################
for(ivar in  c('rrmse_est_array', 'rrmse_cv_array', 'true_cv_array',
'sim_mean', 'sim_cv')){
assign(x=paste0('STRS_', ivar), value = get(ivar))
}
save(file = paste0(output_wd, '/Stratified_RS_Simulation_Results.RData'),
list = c(paste0('STRS_', c('rrmse_est_array', 'rrmse_cv_array',
'true_cv_array', 'sim_mean', 'sim_cv')),
'true_mean', 'sci_names', 'NTime', 'ns', 'Niters', 'N',
'getseed'))
save(file = paste0(output_wd, '/Stratified_RS_Simulation_Results.RData'),
list = c(paste0('STRS_', c('rrmse_est_array', 'rrmse_cv_array',
'true_cv_array', 'sim_mean', 'sim_cv')),
'true_mean', 'sci_names', 'NTime', 'ns', 'Niters', 'N'))
boxplot(rrmse_cv_array[,,1,1], horizontal = TRUE, las = 1, ylim = c(0,0.5))
boxplot(true_cv_array[,,9,1], horizontal = TRUE, las = 1, ylim = c(0,0.5))
boxplot(rrmse_cv_array[,,9,1], horizontal = TRUE, las = 1, ylim = c(0,0.5))
par(mfrow = c(2,2))
for(istrata in c(1,9)){
boxplot(true_cv_array[,,istrata,1], horizontal = TRUE, las = 1, ylim = c(0,0.5))
boxplot(rrmse_cv_array[,,istrata,1], horizontal = TRUE, las = 1, ylim = c(0,0.5))
}
plot(1, type = 'n', xlim = c(0,2), ylim = c(0,.1))
plot(1, type = 'n', xlim = c(0,2), ylim = c(0,.1))
plot(1, type = 'n', xlim = c(0,2), ylim = c(0,.1), las = 1)
ispp = 1
boxplot(true_cv_array[,ispp,c(1,9),1])
boxplot(true_cv_array[,ispp,c(1,9),1], ylim = c(0,.15))
boxplot(true_cv_array[,ispp,c(1,9),1], ylim = c(0,.15))
boxplot(rrmse_array[,ispp,c(1,9),1], ylim = c(0,.15))
boxplot(rrmse_cv_array[,ispp,c(1,9),1], ylim = c(0,.15))
boxplot(rrmse_cv_array[,ispp,c(1,9),1], ylim = c(0,.2))
boxplot(rrmse_cv_array[,ispp,c(1,9),1], ylim = c(0,.3))
par(mfrow = c(5,3))
for(ispp in 1:ns){
boxplot(true_cv_array[,ispp,c(1,9),1], ylim = c(0,.15))
}
boxplot(true_cv_array[,ispp,c(1,9),1], ylim = c(0,.5))
par(mfrow = c(5,3))
for(ispp in 1:ns){
boxplot(true_cv_array[,ispp,c(1,9),1], ylim = c(0,.5))
}
par(mfrow = c(5,3), mar = c(0,0,0,0))
for(ispp in 1:ns){
boxplot(true_cv_array[,ispp,c(1,9),1], ylim = c(0,.5))
}
for(ispp in 1:ns){
boxplot(rrmse_cv_array[,ispp,c(1,9),1], ylim = c(0,.5))
}
str(sim_mean)
hist(sim_mean[,ispp,c(1),1,])
hist(sim_mean[1,ispp,c(1),1,])
str(true_mean)
abline(v = true_mean[ispp,1])
true_mean[ispp,1]
ispp
abline(v = true_mean[1,ispp])
abline(v = true_mean[1,ispp], lwd = 3, col = 'red')
par(mfrow = c(5,3), mar = c(0,0,0,0))
for(ispp in 1:ns){
hist(sim_mean[1,ispp,c(1),1,])
abline(v = true_mean[1,ispp], lwd = 3, col = 'red')
}
par(mfrow = c(5,3), mar = c(1,1,1,1))
for(ispp in 1:ns){
hist(sim_mean[1,ispp,c(1),1,])
abline(v = true_mean[1,ispp], lwd = 3, col = 'red')
}
######################################
## Simulate Random Sampling according to the optimized
## stratifications
######################################
rm(list = ls())
###############################
## Set up directories
###############################
which_machine = c('Zack_MAC'=1, 'Zack_PC' =2, 'Zack_GI_PC'=3, 'VM' = 4)[1]
VAST_model = "6g"
optimization_type = c('_spatial', '_spatiotemporal')[2]
VAST_dir = paste0(c('/Users/zackoyafuso/Google Drive/',
'C:/Users/Zack Oyafuso/Google Drive/',
'C:/Users/zack.oyafuso/Desktop/',
'C:/Users/zack.oyafuso/Desktop/')[which_machine],
'VAST_Runs/VAST_output', VAST_model)
output_wd = paste0(c('/Users/zackoyafuso/Documents/',
'C:/Users/Zack Oyafuso/Documents/',
'C:/Users/zack.oyafuso/Work/',
'C:/Users/zack.oyafuso/Work/' )[which_machine],
"GitHub/MS_OM_GoA/Optimum_Allocation/model_", VAST_model,
optimization_type)
#########################
## Load data
#########################
load(paste0(output_wd, '/optimization_data_model_', VAST_model, '.RData'))
#Constants
ids = as.numeric(rownames(frame))
N = length(ids)
stratas = c(5,10,15,20,25,30,40,50,60)
Nstrata = length(stratas)
Niters = 1000
sci_names = c("Atheresthes stomias", "Gadus chalcogrammus",
"Gadus macrocephalus", "Glyptocephalus zachirus" ,
"Hippoglossoides elassodon", "Hippoglossus stenolepis",
"Lepidopsetta bilineata", "Lepidopsetta polyxystra",
"Limanda aspera", "Microstomus pacificus",
"Sebastes alutus", "Sebastes B_R", "Sebastes polyspinis",
"Sebastes variabilis", "Sebastolobus alascanus" )
#Add year column to the raw dataframe, modify res_df
frame_raw$year = rep(1:NTime, each = N)
#################
# true density
#################
stmt = paste0('aggregate(cbind(',
paste0('Y', 1:(ns-1), sep = ',', collapse = ''), 'Y',ns,
") ~ year, data = frame_raw, FUN = mean)")
true_mean = eval(parse(text = stmt))[,-1]
colnames(true_mean) = sci_names
sim_mean = sim_cv = array(dim = c(NTime, ns, Nstrata, 3, Niters),
dimnames = list(paste0('Year_', 1:NTime),
sci_names,
NULL,
NULL))
##########################
## Which Runs to use for each strata and sample size
##########################
samplesizes = list()
for(istrata in 1:Nstrata){
temp_strata = paste0('Str_', stratas[istrata])
runs = grep(x = dir(paste0(output_wd, '/Flexible_Optimization'),
full.names = T),
pattern = paste0('Thres20Str', stratas[istrata]),
value = T)
nruns = length(runs)
if(nruns != 0){
for(irun in 1:nruns){
load( paste0(runs[irun], '/result_list.RData') )
samplesizes[[temp_strata]] = c(samplesizes[[temp_strata]],
result_list$n)
}
}
else(samplesizes[[temp_strata]] = NA)
}
##########################
## Simulating each optimization
##########################
for(istrata in c(1,9)){
for(isample in 1) {
temp_run = which.min(abs(samplesizes[[istrata]]-c(280,550,820)[isample]))
temp_dir = paste0(output_wd, '/Flexible_Optimization/Thres20Str',
stratas[istrata], 'Run', temp_run)
load(paste0(temp_dir, '/result_list.RData'))
strata_list = result_list[[2]]
strata_allocation = strata_list$Allocation
stratapop = strata_list$Population
stratanos = result_list[[1]]$indices$X1
for(iyear in 1:NTime){
for(iter in 1:Niters){
#Sample based on the stratification allocations
sample_vec = c()
for(i in 1:nrow(strata_list) ){
available_cells = which(stratanos == i)
sample_cells = sample(x = available_cells,
size = strata_allocation[i],
replace = F)
sample_vec = c(sample_vec, sample_cells)
}
#Organize sample set and total number of samples
sample_vec = sort(sample_vec)
n = length(sample_vec)
stratano_samp =  stratanos[sample_vec]
sample_df = subset(frame_raw, year == iyear)[sample_vec,]
#Calculate Stratum Mean Density and Variance
stmt = paste0('aggregate(cbind(',
paste0('Y', 1:(ns-1), sep = ',', collapse = ''), 'Y',ns,
") ~ stratano_samp, data = sample_df, FUN = mean)")
sample_mean = eval(parse(text = stmt))[,-1]
stmt = paste0('aggregate(cbind(',
paste0('Y', 1:(ns-1), sep = ',', collapse = ''), 'Y',ns,
") ~ stratano_samp, data = sample_df, FUN = var)")
sample_var = eval(parse(text = stmt))[,-1]
#How many samples are allocated in each strata
#How many sampling units are in each strata
Wh = stratapop/N
wh = strata_allocation/stratapop
#Calculate Total Abundance and Variance, calculate CV
SRS_var = colSums(sweep(x = sample_var, MARGIN = 1,
STATS = (Wh)^2*(1-wh)/strata_allocation,
FUN = '*'))
SRS_mean = colSums(sweep(x = sample_mean, MARGIN = 1,
STATS = Wh,
FUN = '*'))
strata_cv = sqrt(SRS_var) / SRS_mean
#Record mean and CV values
sim_mean[paste0('Year_',iyear),,istrata,isample,iter] = SRS_mean
sim_cv[paste0('Year_',iyear),,istrata,isample,iter] = strata_cv
}
}
print(paste0('Finished with: ', stratas[istrata], ' Strata and ',
isample, ' Boat'))
}
}
#################################
## Simulation Metrics
#################################
#True CV, Cv of Cv, Rrmse of Cv
true_cv_array = rrmse_est_array = rrmse_cv_array =
array(dim = c(NTime, ns, Nstrata, 3),
dimnames = list(paste0('Year_', 1:NTime), sci_names, NULL, NULL ))
for(iyear in 1:NTime){
for(istrata in 1:Nstrata){
for(isample in 1:3){
for(spp in sci_names){
iter_est = sim_mean[paste0('Year_', iyear),spp,istrata,isample,]
iter_cv = sim_cv[paste0('Year_', iyear), spp, istrata,isample, ]
true_cv = sd(iter_est) / true_mean[iyear, spp]
true_cv_array[paste0('Year_', iyear),spp,istrata,isample] = true_cv
rrmse_cv_array[paste0('Year_', iyear), spp, istrata,isample] =
sqrt(mean((iter_cv-true_cv)^2)) / mean(iter_cv)
rrmse_est_array[paste0('Year_', iyear), spp, istrata,isample] =
sqrt(mean((iter_est-true_mean[iyear,spp])^2))/
true_mean[iyear,spp]
}
}
}
}
#######################
## Save results
#######################
for(ivar in  c('rrmse_est_array', 'rrmse_cv_array', 'true_cv_array',
'sim_mean', 'sim_cv')){
assign(x=paste0('STRS_', ivar), value = get(ivar))
}
save(file = paste0(output_wd, '/Stratified_RS_Simulation_Results.RData'),
list = c(paste0('STRS_', c('rrmse_est_array', 'rrmse_cv_array',
'true_cv_array', 'sim_mean', 'sim_cv')),
'true_mean', 'sci_names', 'NTime', 'ns', 'Niters', 'N'))
par(mfrow = c(2,2))
for(istrata in c(1,9)){
boxplot(true_cv_array[,,istrata,1], horizontal = TRUE, las = 1, ylim = c(0,0.5))
boxplot(rrmse_cv_array[,,istrata,1], horizontal = TRUE, las = 1, ylim = c(0,0.5))
}
par(mfrow = c(5,3), mar = c(0,0,0,0))
for(ispp in 1:ns){
boxplot(true_cv_array[,ispp,c(1,9),1], ylim = c(0,.5))
}
for(ispp in 1:ns){
boxplot(rrmse_cv_array[,ispp,c(1,9),1], ylim = c(0,.5))
}
par(mfrow = c(5,3), mar = c(1,1,1,1))
for(ispp in 1:ns){
hist(sim_mean[1,ispp,c(1),1,])
abline(v = true_mean[1,ispp], lwd = 3, col = 'red')
}
for(iyear in 1:11){
par(mfrow = c(5,3), mar = c(1,1,1,1))
for(ispp in 1:ns){
hist(sim_mean[iyear,ispp,c(1),1,])
abline(v = true_mean[iyear,ispp], lwd = 3, col = 'red')
}
}
source('~/Documents/GitHub/MS_OM_GoA/figure_plot/FlexiblePlots_changename.R', echo=TRUE)
source('~/Documents/GitHub/MS_OM_GoA/figure_plot/FlexiblePlots_changename.R', echo=TRUE)
istrata = 'Str_5'
nruns = nrow(spp_cv[[istrata]]$cv)
spp_order = order(spp_cv[[istrata]]$cv[1,])
par(mar = c(5,5,1,1))
matplot( t(spp_cv[[istrata]]$cv[,spp_order]),
type = 'b', lty = 1, pch = paste(1:nruns ),
las = 1, xlab = 'Species', ylim = c(0,0.3),
ylab = 'Expected Spatiotemporal CV')
abline(h = 0.2, col = 'darkgrey', lty = 'dashed')
plot(samplesizes[[istrata]]$n, pch = paste(1:nruns), type = 'b', cex = 2,
xlab = 'Run Number', ylab = 'Total Sample Size', las = 1, ylim = c(0,850))
abline(h = c(280, 550, 820), col = 'darkgrey', lty = 'dashed')
