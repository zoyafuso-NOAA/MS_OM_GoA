library(VAST)
library(TMBhelper)
# library(devtools)
# install_local('C:/Users/zack.oyafuso/Downloads/FishStatsUtils-2.6.0/',
#               force = T)
###################################
## Set up directories
###################################
which_machine = c('Zack_PC' =1, 'Zack_GI_PC'=2)[2]
# model_settings = data.frame(factorno = 2:4,
#                             modelno = paste0(8, letters[1:3]),
#                             stringsAsFactors = F)
#
# irow = 2
factorno = 3
modelno = '6g'
# factorno = model_settings$factorno[irow]
# modelno = model_settings$modelno[irow]
github_dir = paste0(c('C:/Users/Zack Oyafuso/Documents',
'C:/Users/zack.oyafuso/Work')[which_machine],
'/GitHub/MS_OM_GoA/')
VAST_dir = paste0(c('C:/Users/Zack Oyafuso/Google Drive/',
'C:/Users/zack.oyafuso/Desktop/')[which_machine],
'VAST_Runs/VAST_output', modelno, '/')
###############################
Method = c("Grid", "Mesh", "Spherical_mesh")[2]
n_x = 350   # Specify number of stations (a.k.a. "knots")
strata.limits <- data.frame(
'STRATA' = c("All_areas"),#, "west_of_140W"),
'west_border' = c(-Inf),#, -Inf),
'east_border' = c(Inf)#, -140)
)
load(paste0(dirname(VAST_dir), '/Spatial_Settings_CrVa.RData'))
settings = make_settings( n_x=n_x,
Region='Gulf_of_Alaska',
purpose="index2",
strata.limits=strata.limits,
bias.correct=FALSE,
FieldConfig =  c("Omega1"=factorno,
"Epsilon1"=factorno,
"Omega2"=factorno,
"Epsilon2"=factorno) ,
RhoConfig = c("Beta1"=0, "Beta2"=0,
"Epsilon1"=0, "Epsilon2"=0),
OverdispersionConfig = c("Eta1"=0, "Eta2"=0),
ObsModel = c(2,0) ,
Options = c("SD_site_density"=0,
"SD_site_logdensity"=0,
"Project_factors" = 0),
use_anisotropy = T)
# Fit the model and a first time and record MLE
# fit = fit_model( "settings"=settings,
#                  "working_dir" = paste0(VAST_dir, 'VAST_output', modelno, '/'),
#                  "Lat_i"=Data_Geostat[,'Lat'],
#                  "Lon_i"=Data_Geostat[,'Lon'],
#                  "t_i"=Data_Geostat[,'Year'],
#                  "c_i"=as.numeric(Data_Geostat[,'spp'])-1,
#                  "b_i"=Data_Geostat[,'Catch_KG'],
#                  "a_i"=Data_Geostat[,'AreaSwept_km2'],
#                  "v_i"=Data_Geostat[,'Vessel'],
#                  # "formula" = "Catch_KG ~ LOG_DEPTH + LOG_DEPTH2",
#                  # "covariate_data" = cbind(Data_Geostat[,c('Lat', 'Lon',
#                  #                                          'LOG_DEPTH',
#                  #                                          'LOG_DEPTH2',
#                  #                                          'Catch_KG')],
#                  # Year = NA),
#                  "max_cells" = Inf,
#                  "getJointPrecision"=TRUE,
#                  "newtonsteps" = 1
# )
# ParHat = fit$ParHat
###############################
## Save Fit
###############################
# save(list = 'fit', file = paste0(VAST_dir, 'VAST_out
load(paste0(VAST_dir, 'VAST_MS_GoA_Run.RData'))
ParHat = Save$ParHat
ParHat$L_omega1_z
15+14+13
###################################
## 10-fold Cross Validation
###################################
n_fold = 5
for(fI in 1:n_fold){
if(!dir.exists(paste0(VAST_dir, 'CV_', fI))){
dir.create(paste0(VAST_dir, 'CV_', fI))
}
}
#Add "true" and not interpolated covariate data for model 6X
load( paste0(github_dir, 'Extrapolation_depths.RData'))
X_gtp = array(dim = c(Save$TmbData$n_g,Save$TmbData$n_t, Save$TmbData$n_p) )
for(i in 1:Save$TmbData$n_t) {
X_gtp[,i,] = as.matrix(Extrapolation_depths[,c('DEPTH', 'DEPTH2')])
#X_gtp[,i,] = as.matrix(Extrapolation_depths[,c('DEPTH')])
}
# Loop through partitions, refitting each time with a different PredTF_i
for( fI in 1:n_fold ){
PredTF_i = ifelse( Data_Geostat$fold == fI, TRUE, FALSE )
# Refit, starting at MLE, without calculating standard errors (to save time)
fit_new = fit_model( "settings"=settings,
"working_dir"=paste0(VAST_dir,'CV_', fI),
"Lat_i"=Data_Geostat[,'Lat'],
"Lon_i"=Data_Geostat[,'Lon'],
"t_i"=Data_Geostat[,'Year'],
"c_i"=as.numeric(Data_Geostat[,'spp'])-1,
"b_i"=Data_Geostat[,'Catch_KG'],
"a_i"=Data_Geostat[,'AreaSwept_km2'],
"v_i"=Data_Geostat[,'Vessel'],
"PredTF_i"=PredTF_i,
"Parameters"=ParHat,
"getsd"=F,
"silent" = T,
"formula" = "Catch_KG ~ LOG_DEPTH + LOG_DEPTH2",
"covariate_data" = cbind(Data_Geostat[,c('Lat', 'Lon',
'LOG_DEPTH',
'LOG_DEPTH2',
'Catch_KG')],
Year = NA),
"max_cells" = Inf,
"newtonsteps" = 1,
'X_gtp' = X_gtp)
#Finally, we bundle and save output
# Save fit
save(list = 'fit_new',  file = paste0(VAST_dir,'CV_', fI, '/fit.RData'))
}
source('~/GitHub/MS_OM_GoA/fit_model_X_GTP.R', echo=TRUE)
source('~/GitHub/MS_OM_GoA/fit_model_X_GTP.R', echo=TRUE)
# Loop through partitions, refitting each time with a different PredTF_i
for( fI in 1:n_fold ){
PredTF_i = ifelse( Data_Geostat$fold == fI, TRUE, FALSE )
# Refit, starting at MLE, without calculating standard errors (to save time)
fit_new = fit_model( "settings"=settings,
"working_dir"=paste0(VAST_dir,'CV_', fI),
"Lat_i"=Data_Geostat[,'Lat'],
"Lon_i"=Data_Geostat[,'Lon'],
"t_i"=Data_Geostat[,'Year'],
"c_i"=as.numeric(Data_Geostat[,'spp'])-1,
"b_i"=Data_Geostat[,'Catch_KG'],
"a_i"=Data_Geostat[,'AreaSwept_km2'],
"v_i"=Data_Geostat[,'Vessel'],
"PredTF_i"=PredTF_i,
"Parameters"=ParHat,
"getsd"=F,
"silent" = T,
"formula" = "Catch_KG ~ LOG_DEPTH + LOG_DEPTH2",
"covariate_data" = cbind(Data_Geostat[,c('Lat', 'Lon',
'LOG_DEPTH',
'LOG_DEPTH2',
'Catch_KG')],
Year = NA),
"max_cells" = Inf,
"newtonsteps" = 1,
'X_gtp' = X_gtp)
#Finally, we bundle and save output
# Save fit
save(list = 'fit_new',  file = paste0(VAST_dir,'CV_', fI, '/fit.RData'))
}
########################################
## Cross Validation
## Number of Species Factors, 2-5
########################################
rm(list = ls())
# Load packages
library(VAST)
library(TMBhelper)
# library(devtools)
# install_local('C:/Users/zack.oyafuso/Downloads/FishStatsUtils-2.6.0/',
#               force = T)
###################################
## Set up directories
###################################
which_machine = c('Zack_PC' =1, 'Zack_GI_PC'=2)[2]
model_settings = data.frame(factorno = 2:4,
modelno = paste0(7, letters[1:3]),
stringsAsFactors = F)
irow = 1
irow
# factorno = 3
# modelno = '6g'
factorno = model_settings$factorno[irow]
modelno = model_settings$modelno[irow]
github_dir = paste0(c('C:/Users/Zack Oyafuso/Documents',
'C:/Users/zack.oyafuso/Work')[which_machine],
'/GitHub/MS_OM_GoA/')
VAST_dir = paste0(c('C:/Users/Zack Oyafuso/Google Drive/',
'C:/Users/zack.oyafuso/Desktop/')[which_machine],
'VAST_Runs/VAST_output', modelno, '/')
###############################
## Spatial settings: The following settings define the spatial resolution
## for the model, and whether to use a grid or mesh approximation
## Stratification for results
###############################
Method = c("Grid", "Mesh", "Spherical_mesh")[2]
n_x = 350   # Specify number of stations (a.k.a. "knots")
strata.limits <- data.frame(
'STRATA' = c("All_areas"),#, "west_of_140W"),
'west_border' = c(-Inf),#, -Inf),
'east_border' = c(Inf)#, -140)
)
load(paste0(dirname(VAST_dir), '/Spatial_Settings_CrVa.RData'))
settings = make_settings( n_x=n_x,
Region='Gulf_of_Alaska',
purpose="index2",
strata.limits=strata.limits,
bias.correct=FALSE,
FieldConfig =  c("Omega1"=factorno,
"Epsilon1"=factorno,
"Omega2"=factorno,
"Epsilon2"=factorno) ,
RhoConfig = c("Beta1"=0, "Beta2"=0,
"Epsilon1"=0, "Epsilon2"=0),
OverdispersionConfig = c("Eta1"=0, "Eta2"=0),
ObsModel = c(2,0) ,
Options = c("SD_site_density"=0,
"SD_site_logdensity"=0,
"Project_factors" = 0),
use_anisotropy = T)
load(paste0(VAST_dir, 'fit.RData'))
ParHat = fit$ParHat
###################################
## 10-fold Cross Validation
###################################
n_fold = 5
for(fI in 1:n_fold){
if(!dir.exists(paste0(VAST_dir, 'CV_', fI))){
dir.create(paste0(VAST_dir, 'CV_', fI))
}
}
# Loop through partitions, refitting each time with a different PredTF_i
for( fI in 1:n_fold ){
PredTF_i = ifelse( Data_Geostat$fold == fI, TRUE, FALSE )
# Refit, starting at MLE, without calculating standard errors (to save time)
fit_new = fit_model( "settings"=settings,
"working_dir"=paste0(VAST_dir,'CV_', fI),
"Lat_i"=Data_Geostat[,'Lat'],
"Lon_i"=Data_Geostat[,'Lon'],
"t_i"=Data_Geostat[,'Year'],
"c_i"=as.numeric(Data_Geostat[,'spp'])-1,
"b_i"=Data_Geostat[,'Catch_KG'],
"a_i"=Data_Geostat[,'AreaSwept_km2'],
"v_i"=Data_Geostat[,'Vessel'],
"PredTF_i"=PredTF_i,
"Parameters"=ParHat,
"getsd"=F,
"silent" = T,
"formula" = "Catch_KG ~ LOG_DEPTH + LOG_DEPTH2",
"covariate_data" = cbind(Data_Geostat[,c('Lat', 'Lon',
'LOG_DEPTH',
'LOG_DEPTH2',
'Catch_KG')],
Year = NA),
"max_cells" = Inf,
"newtonsteps" = 1)#,
# 'X_gtp' = X_gtp)
#Finally, we bundle and save output
# Save fit
save(list = 'fit_new',  file = paste0(VAST_dir,'CV_', fI, '/fit.RData'))
}
########################################
## Cross Validation
## Number of Species Factors, 2-5
########################################
rm(list = ls())
# Load packages
library(VAST)
library(TMBhelper)
###################################
## Set up directories
###################################
which_machine = c('Zack_PC' =1, 'Zack_GI_PC'=2)[2]
model_settings = data.frame(factorno = 2:4,
modelno = paste0(7, letters[1:3]),
stringsAsFactors = F)
irow = 2
# factorno = 3
# modelno = '6g'
factorno = model_settings$factorno[irow]
modelno = model_settings$modelno[irow]
github_dir = paste0(c('C:/Users/Zack Oyafuso/Documents',
'C:/Users/zack.oyafuso/Work')[which_machine],
'/GitHub/MS_OM_GoA/')
VAST_dir = paste0(c('C:/Users/Zack Oyafuso/Google Drive/',
'C:/Users/zack.oyafuso/Desktop/')[which_machine],
'VAST_Runs/VAST_output', modelno, '/')
###############################
## Spatial settings: The following settings define the spatial resolution
## for the model, and whether to use a grid or mesh approximation
## Stratification for results
###############################
Method = c("Grid", "Mesh", "Spherical_mesh")[2]
n_x = 350   # Specify number of stations (a.k.a. "knots")
strata.limits <- data.frame(
'STRATA' = c("All_areas"),#, "west_of_140W"),
'west_border' = c(-Inf),#, -Inf),
'east_border' = c(Inf)#, -140)
)
load(paste0(dirname(VAST_dir), '/Spatial_Settings_CrVa.RData'))
settings = make_settings( n_x=n_x,
Region='Gulf_of_Alaska',
purpose="index2",
strata.limits=strata.limits,
bias.correct=FALSE,
FieldConfig =  c("Omega1"=factorno,
"Epsilon1"=factorno,
"Omega2"=factorno,
"Epsilon2"=factorno) ,
RhoConfig = c("Beta1"=0, "Beta2"=0,
"Epsilon1"=0, "Epsilon2"=0),
OverdispersionConfig = c("Eta1"=0, "Eta2"=0),
ObsModel = c(2,0) ,
Options = c("SD_site_density"=0,
"SD_site_logdensity"=0,
"Project_factors" = 0),
use_anisotropy = T)
load(paste0(VAST_dir, 'fit.RData'))
ParHat = fit$ParHat
###################################
## 10-fold Cross Validation
###################################
n_fold = 5
for(fI in 1:n_fold){
if(!dir.exists(paste0(VAST_dir, 'CV_', fI))){
dir.create(paste0(VAST_dir, 'CV_', fI))
}
}
#Add "true" and not interpolated covariate data for model 6X
load( paste0(github_dir, 'Extrapolation_depths.RData'))
# Loop through partitions, refitting each time with a different PredTF_i
for( fI in 1:n_fold ){
PredTF_i = ifelse( Data_Geostat$fold == fI, TRUE, FALSE )
# Refit, starting at MLE, without calculating standard errors (to save time)
fit_new = fit_model( "settings"=settings,
"working_dir"=paste0(VAST_dir,'CV_', fI),
"Lat_i"=Data_Geostat[,'Lat'],
"Lon_i"=Data_Geostat[,'Lon'],
"t_i"=Data_Geostat[,'Year'],
"c_i"=as.numeric(Data_Geostat[,'spp'])-1,
"b_i"=Data_Geostat[,'Catch_KG'],
"a_i"=Data_Geostat[,'AreaSwept_km2'],
"v_i"=Data_Geostat[,'Vessel'],
"PredTF_i"=PredTF_i,
"Parameters"=ParHat,
"getsd"=F,
"silent" = T,
"formula" = "Catch_KG ~ LOG_DEPTH + LOG_DEPTH2",
"covariate_data" = cbind(Data_Geostat[,c('Lat', 'Lon',
'LOG_DEPTH',
'LOG_DEPTH2',
'Catch_KG')],
Year = NA),
"max_cells" = Inf,
"newtonsteps" = 1)#,
# 'X_gtp' = X_gtp)
#Finally, we bundle and save output
# Save fit
save(list = 'fit_new',  file = paste0(VAST_dir,'CV_', fI, '/fit.RData'))
}
library(SamplingStrata)
?optimStrata
################################################
## Optimization: Lowest CV for a given sample size
################################################
rm(list = ls())
###############################
## Import required packages
###############################
library(sp); library(RColorBrewer); library(raster)
###############################
## Set up directories
###############################
which_machine = c('Zack_MAC'=1, 'Zack_PC' =2, 'Zack_GI_PC'=3)[3]
optimization_type = c('_spatial', '_spatiotemporal')[2]
modelno = "6g"
SamplingStrata_dir = paste0(c('/Users/zackoyafuso/',
'C:/Users/Zack Oyafuso/',
'C:/Users/zack.oyafuso/')[which_machine],
'Downloads/SamplingStrata-master/R')
github_dir = paste0(c('/Users/zack.oyafuso/Documents',
'C:/Users/Zack Oyafuso/Documents',
'C:/Users/zack.oyafuso/Work',
'C:/Users/zack.oyafuso/Work')[which_machine],
'/GitHub/MS_OM_GoA/Optimum_Allocation/')
output_wd = paste0(c('/Users/zackoyafuso/Documents/',
'C:/Users/Zack Oyafuso/Documents/',
'C:/Users/zack.oyafuso/Work/',
'C:/Users/zack.oyafuso/Work/' )[which_machine],
"GitHub/MS_OM_GoA/Optimum_Allocation/model_", modelno,
optimization_type)
if(!dir.exists(output_wd)) dir.create(output_wd)
#########################
## Load functions from SamplingStrata packages into global environment
## Load modified buildStrataDF function if using spatiotemporal modification
#########################
if(optimization_type == '_spatiotemporal'){
for(ifile in dir(SamplingStrata_dir, full.names = T)) source(ifile)
source(paste0(github_dir, '/buildStrataDF_Zack.R'))
}
if(optimization_type == '_spatial') library(SamplingStrata)
###########################
## Load Data
###########################
load(paste0(output_wd, '/optimization_data_model_',
modelno, '.RData'))
if(optimization_type == '_spatial') rm(frame_raw)
###########################
## Load Current CV Simulation
###########################
load( paste0(output_wd, '/Survey_Simulation_Results.RData') )
CV_constraints = apply(Survey_true_cv_array, MARGIN = 2:3, mean)
CV_constraints = ifelse(CV_constraints < 0.1, 0.1, CV_constraints)
stratas = c(5,10,15,20,25,30,40,50,60)
ns = 15
############################
## Optimizer
############################
par(mfrow = c(5,6), mar = c(2,2,0,0))
############################
## Optimizer
############################
par(mfrow = c(6,6), mar = c(2,2,0,0))
for(isample in 2){
#Create CV dataframe
cv = list()
for(spp in 1:ns)
cv[[paste0('CV',spp)]] = as.numeric(CV_constraints[spp,isample])
cv[['DOM']] = 1
cv[['domainvalue']] = 1
cv <- as.data.frame(cv)
for(istrata in 1:length(stratas)){
#Set wd for output files
temp_dir = paste0(output_wd, '/Survey_Comparison/Str_',
stratas[istrata], 'Boat_', isample, '/')
if(!dir.exists(temp_dir)) dir.create(temp_dir)
setwd(temp_dir)
#Run optimization
solution <- optimStrata(method = "continuous",
errors = cv,
framesamp = frame,
iter = 200,#ifelse(stratas[istrata] <= 20, 100, 150),
pops = 30,
elitism_rate = 0.1,
mut_chance = 1 / (stratas[istrata] + 1),
nStrata = stratas[istrata],
showPlot = T,
parallel = F,
writeFiles = T)
sum_stats = summaryStrata(solution$framenew,
solution$aggr_strata,
progress=FALSE)
#Plot Solution
goa = SpatialPointsDataFrame(coords = Extrapolation_depths[,c('E_km', 'N_km')],
data = cbind(solution$framenew[,paste0('Y',1:ns)],
Str_no = solution$framenew$STRATO,
depth = solution$framenew$X1,
lon = solution$framenew$X2) )
goa_ras = raster(goa, resolution = 5)
goa_ras =rasterize(x = goa, y = goa_ras, field = 'Str_no')
plot(goa_ras, col = terrain.colors(10)[-10], axes = F)
#Save Output
result_list = list(solution, sum_stats)
save(list = 'result_list', file = 'result_list.RData')
}
}
################################################
## Optimization: Lowest CV for a given sample size
################################################
rm(list = ls())
###############################
## Import required packages
###############################
library(sp); library(RColorBrewer); library(raster)
###############################
## Set up directories
###############################
which_machine = c('Zack_MAC'=1, 'Zack_PC' =2, 'Zack_GI_PC'=3)[3]
optimization_type = c('_spatial', '_spatiotemporal')[2]
modelno = "6g"
SamplingStrata_dir = paste0(c('/Users/zackoyafuso/',
'C:/Users/Zack Oyafuso/',
'C:/Users/zack.oyafuso/')[which_machine],
'Downloads/SamplingStrata-master/R')
github_dir = paste0(c('/Users/zack.oyafuso/Documents',
'C:/Users/Zack Oyafuso/Documents',
'C:/Users/zack.oyafuso/Work',
'C:/Users/zack.oyafuso/Work')[which_machine],
'/GitHub/MS_OM_GoA/Optimum_Allocation/')
output_wd = paste0(c('/Users/zackoyafuso/Documents/',
'C:/Users/Zack Oyafuso/Documents/',
'C:/Users/zack.oyafuso/Work/',
'C:/Users/zack.oyafuso/Work/' )[which_machine],
"GitHub/MS_OM_GoA/Optimum_Allocation/model_", modelno,
optimization_type)
if(!dir.exists(output_wd)) dir.create(output_wd)
#########################
## Load functions from SamplingStrata packages into global environment
## Load modified buildStrataDF function if using spatiotemporal modification
#########################
if(optimization_type == '_spatiotemporal'){
for(ifile in dir(SamplingStrata_dir, full.names = T)) source(ifile)
source(paste0(github_dir, '/buildStrataDF_Zack.R'))
}
if(optimization_type == '_spatial') library(SamplingStrata)
###########################
## Load Data
###########################
load(paste0(output_wd, '/optimization_data_model_',
modelno, '.RData'))
if(optimization_type == '_spatial') rm(frame_raw)
###########################
## Load Current CV Simulation
###########################
load( paste0(output_wd, '/Survey_Simulation_Results.RData') )
