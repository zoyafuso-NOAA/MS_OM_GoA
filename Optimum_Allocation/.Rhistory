legend('topright', paste('Time 0'), bty = 'n')
mtext(side = 3, 'Probability Mass')
#Choose fishing sites
trip_decision = rmultinom(n = 100,
size = 1,
prob = prior)
which_cells = apply(trip_decision, MAR = 2,
FUN = function(x) which(x == 1))
effort = tabulate(which_cells, nbins = n_cells)
eff_domain = domain
values(eff_domain)[!is.na(values(eff_domain))] = effort
plot(eff_domain, axes = F, zlim = c(0,16))
mtext(side = 3, 'Number of Trips')
#Profit values
profit_vals = 20*data.frame(n_10 = rep(100,8), n_400 = c(125,80,50,25,0,-50,-75,-100))
#Temporal Dynamics
for(itime in 1:nrow(profit_vals)){
prior[fished_cells] = as.numeric(0.5*(prior[fished_cells] + 20000*(profit_vals[itime,] - profit_min) /(profit_max - profit_min) ))
for(icell in unfished_sites){
weights = exp(-dist_bt_cells[icell, c(icell, fished_cells)]*k)
prior[icell] = weighted.mean(x = prior[c(icell, fished_cells)], w = weights)
}
prior_domain = domain
values(prior_domain)[!is.na(values(prior_domain))] = prior
#if the alpha value is < 1, set to 1
prior = ifelse(prior < 1, 1, prior)
alpha_weights = rdirichlet(n = 1, alpha = prior)
values(temp_domain)[!is.na(values(temp_domain))] = alpha_weights
#Choose fishing sites
trip_decision = rmultinom(n = 100,
size = 1,
prob = prior)
which_cells = apply(trip_decision, MAR = 2,
FUN = function(x) which(x == 1))
effort = tabulate(which_cells, nbins = n_cells)
eff_domain = domain
values(eff_domain)[!is.na(values(eff_domain))] = effort
if(itime%%2 == 0){
plot(prior_domain, zlim = c(0,20000), axes = F)
plot(temp_domain, zlim = c(0,0.10), axes = F)
legend('topright', paste('Time', itime), bty = 'n')
plot(eff_domain, axes = F, zlim = c(0,16))
points(fished_cells_xy, cex = 3)
xoff = diff(domain@extent[1:2])
yoff = diff(domain@extent[3:4])
text(x = domain@extent@xmin + xoff*c(0.25, 0.8),
y = domain@extent@ymin + yoff*c(.95, 0.15),
c(100, c(125,80,50,25,0,-50,-75,-100)[itime]) )
}
}
par(mfrow = c(5,3), mar = c(0,2,2,2), family = 'serif')
#Initial Distribution
prior = rep(10, n_cells)
prior_domain = domain
values(prior_domain)[!is.na(values(prior_domain))] = prior
plot(prior_domain, zlim = c(0,20000), axes = F)
mtext(side = 3, 'Alpha Distribution')
alpha_weights = rdirichlet(n = 1, alpha = prior)
temp_domain = domain
values(temp_domain)[!is.na(values(temp_domain))] = alpha_weights
plot(temp_domain, zlim = c(0,0.10), axes = F)
legend('topright', paste('Time 0'), bty = 'n')
mtext(side = 3, 'Probability Mass')
#Choose fishing sites
trip_decision = rmultinom(n = 100,
size = 1,
prob = prior)
which_cells = apply(trip_decision, MAR = 2,
FUN = function(x) which(x == 1))
effort = tabulate(which_cells, nbins = n_cells)
eff_domain = domain
values(eff_domain)[!is.na(values(eff_domain))] = effort
plot(eff_domain, axes = F, zlim = c(0,16))
mtext(side = 3, 'Number of Trips')
#Profit values
profit_vals = 20*data.frame(n_10 = rep(100,8), n_400 = c(125,80,50,25,0,-50,-75,-100))
#Temporal Dynamics
for(itime in 1:nrow(profit_vals)){
prior[fished_cells] = as.numeric(0.5*(prior[fished_cells] + 20000*(profit_vals[itime,] - profit_min) /(profit_max - profit_min) ))
for(icell in unfished_sites){
weights = exp(-dist_bt_cells[icell, c(icell, fished_cells)]*k)
prior[icell] = weighted.mean(x = prior[c(icell, fished_cells)], w = weights)
}
prior_domain = domain
values(prior_domain)[!is.na(values(prior_domain))] = prior
#if the alpha value is < 1, set to 1
prior = ifelse(prior < 1, 1, prior)
alpha_weights = rdirichlet(n = 1, alpha = prior)
values(temp_domain)[!is.na(values(temp_domain))] = alpha_weights
#Choose fishing sites
trip_decision = rmultinom(n = 100,
size = 1,
prob = prior)
which_cells = apply(trip_decision, MAR = 2,
FUN = function(x) which(x == 1))
effort = tabulate(which_cells, nbins = n_cells)
eff_domain = domain
values(eff_domain)[!is.na(values(eff_domain))] = effort
if(itime%%2 == 0){
plot(prior_domain, zlim = c(0,20000), axes = F)
plot(temp_domain, zlim = c(0,0.10), axes = F)
legend('topright', paste('Time', itime), bty = 'n', cex = 2)
plot(eff_domain, axes = F, zlim = c(0,16))
points(fished_cells_xy, cex = 3)
xoff = diff(domain@extent[1:2])
yoff = diff(domain@extent[3:4])
text(x = domain@extent@xmin + xoff*c(0.25, 0.8),
y = domain@extent@ymin + yoff*c(.95, 0.15),
c(100, c(125,80,50,25,0,-50,-75,-100)[itime]) )
}
}
par(mfrow = c(5,3), mar = c(0,2,2,2), family = 'serif')
#Initial Distribution
prior = rep(10, n_cells)
prior_domain = domain
values(prior_domain)[!is.na(values(prior_domain))] = prior
plot(prior_domain, zlim = c(0,20000), axes = F)
mtext(side = 3, 'Alpha Distribution')
alpha_weights = rdirichlet(n = 1, alpha = prior)
temp_domain = domain
values(temp_domain)[!is.na(values(temp_domain))] = alpha_weights
plot(temp_domain, zlim = c(0,0.10), axes = F)
legend('topright', paste('Time 0'), bty = 'n')
mtext(side = 3, 'Probability Mass')
#Choose fishing sites
trip_decision = rmultinom(n = 100,
size = 1,
prob = prior)
which_cells = apply(trip_decision, MAR = 2,
FUN = function(x) which(x == 1))
effort = tabulate(which_cells, nbins = n_cells)
eff_domain = domain
values(eff_domain)[!is.na(values(eff_domain))] = effort
plot(eff_domain, axes = F, zlim = c(0,16))
mtext(side = 3, 'Number of Trips')
#Profit values
profit_vals = 20*data.frame(n_10 = rep(100,8), n_400 = c(125,80,50,25,0,-50,-75,-100))
#Temporal Dynamics
for(itime in 1:nrow(profit_vals)){
prior[fished_cells] = as.numeric(0.5*(prior[fished_cells] + 20000*(profit_vals[itime,] - profit_min) /(profit_max - profit_min) ))
for(icell in unfished_sites){
weights = exp(-dist_bt_cells[icell, c(icell, fished_cells)]*k)
prior[icell] = weighted.mean(x = prior[c(icell, fished_cells)], w = weights)
}
prior_domain = domain
values(prior_domain)[!is.na(values(prior_domain))] = prior
#if the alpha value is < 1, set to 1
prior = ifelse(prior < 1, 1, prior)
alpha_weights = rdirichlet(n = 1, alpha = prior)
values(temp_domain)[!is.na(values(temp_domain))] = alpha_weights
#Choose fishing sites
trip_decision = rmultinom(n = 100,
size = 1,
prob = prior)
which_cells = apply(trip_decision, MAR = 2,
FUN = function(x) which(x == 1))
effort = tabulate(which_cells, nbins = n_cells)
eff_domain = domain
values(eff_domain)[!is.na(values(eff_domain))] = effort
if(itime%%2 == 0){
plot(prior_domain, zlim = c(0,20000), axes = F)
plot(temp_domain, zlim = c(0,0.10), axes = F)
legend('topright', paste('Time', itime), bty = 'n', cex = 1.5)
plot(eff_domain, axes = F, zlim = c(0,16))
points(fished_cells_xy, cex = 3)
xoff = diff(domain@extent[1:2])
yoff = diff(domain@extent[3:4])
text(x = domain@extent@xmin + xoff*c(0.25, 0.8),
y = domain@extent@ymin + yoff*c(.95, 0.15),
c(100, c(125,80,50,25,0,-50,-75,-100)[itime]) )
}
}
install.packages('googleways')
install.packages('googleway')
library(googleway)
?google_directions
google_directions(
origin = "1400 Pensacola Street Honolulu Hawaii 96822"
desination = 'UH Manoa'
)
google_directions(
origin = "1400 Pensacola Street Honolulu Hawaii 96822",
desination = 'UH Manoa'
)
google_directions(
origin = "1400 Pensacola Street Honolulu Hawaii 96822",
destination = 'UH Manoa'
)
?set_key
key = set_key()
read.delim('/Users/zackoyafuso/Google Drive/ZSO_Pubs/Dissertation_Defense/ZSO_Google_APIkey.rtf')
read.delim2('/Users/zackoyafuso/Google Drive/ZSO_Pubs/Dissertation_Defense/ZSO_Google_APIkey.rtf')
read.table('/Users/zackoyafuso/Google Drive/ZSO_Pubs/Dissertation_Defense/ZSO_Google_APIkey.rtf')
readLines('/Users/zackoyafuso/Google Drive/ZSO_Pubs/Dissertation_Defense/ZSO_Google_APIkey.rtf')
read.csv('/Users/zackoyafuso/Google Drive/ZSO_Pubs/Dissertation_Defense/ZSO_Google_APIkey.rtf')
read.csv('/Users/zackoyafuso/Google Drive/ZSO_Pubs/Dissertation_Defense/ZSO_Google_APIkey.rtf', header = T)
read.csv('/Users/zackoyafuso/Google Drive/ZSO_Pubs/Dissertation_Defense/ZSO_Google_APIkey.rtf')
?readLine
?readLines
readLines('/Users/zackoyafuso/Google Drive/ZSO_Pubs/Dissertation_Defense/ZSO_Google_APIkey.rtf', n = 1)
readLines('/Users/zackoyafuso/Google Drive/ZSO_Pubs/Dissertation_Defense/ZSO_Google_API_Key.txt', n = 1)
readtable('/Users/zackoyafuso/Google Drive/ZSO_Pubs/Dissertation_Defense/ZSO_Google_API_Key.txt'
read.csv('/Users/zackoyafuso/Google Drive/ZSO_Pubs/Dissertation_Defense/ZSO_Google_APIkey.rtf'))
readtable('/Users/zackoyafuso/Google Drive/ZSO_Pubs/Dissertation_Defense/ZSO_Google_API_Key.txt')
read.table('/Users/zackoyafuso/Google Drive/ZSO_Pubs/Dissertation_Defense/ZSO_Google_API_Key.txt')
read.table('/Users/zackoyafuso/Google Drive/ZSO_Pubs/Dissertation_Defense/ZSO_Google_API_Key.txt')
read.table(paste0('/Users/zackoyafuso/',
'Google Drive/ZSO_Pubs/Dissertation_Defense/',
'ZSO_Google_API_Key.txt'))
key = set_key(read.table(paste0('/Users/zackoyafuso/',
'Google Drive/ZSO_Pubs/Dissertation_Defense/',
'ZSO_Google_API_Key.txt')))
key
?set_key
key = set_key(key = read.table(paste0('/Users/zackoyafuso/',
'Google Drive/ZSO_Pubs/Dissertation_Defense/',
'ZSO_Google_API_Key.txt')),
api = 'directions')
key
key = set_key(key = read.table(paste0('/Users/zackoyafuso/',
'Google Drive/ZSO_Pubs/Dissertation_Defense/',
'ZSO_Google_API_Key.txt')),
api = NULL)
key
google_directions(
origin = "1400 Pensacola Street Honolulu Hawaii 96822",
destination = 'UH Manoa',
key = key
)
read.table(paste0('/Users/zackoyafuso/',
'Google Drive/ZSO_Pubs/Dissertation_Defense/',
'ZSO_Google_API_Key.txt'))
str(read.table(paste0('/Users/zackoyafuso/',
'Google Drive/ZSO_Pubs/Dissertation_Defense/',
'ZSO_Google_API_Key.txt')))
googlekey = read.table(paste0('/Users/zackoyafuso/',
'Google Drive/ZSO_Pubs/Dissertation_Defense/',
'ZSO_Google_API_Key.txt'))
paste(googlekey)
googlekey
unlist(googlekey)
as.character(googlekey),
as.string(googlekey),
as.character(googlekey)
as.character(googlekey$V1)
key = set_key(key = as.character(googlekey$V1),
api = NULL)
key
as.character(googlekey$V1)
key = set_key(key = as.character(googlekey$V1),
api = NULL)
google_directions(
origin = "1400 Pensacola Street Honolulu Hawaii 96822",
destination = 'UH Manoa',
key = key
)
googlekey
install.packages("mapsapi")
library("mapsapi")
?mp_directions
as.POSIXct(x = "14:00")
?as.POSIXct.Date
as.POSIXct.Date(
x = '2019-10-28 14:00:00',
format = "%Y-%m-%d %H:%M:%OS"
)
mp_directions('1400 Pensacola Street Honolulu Hawaii 96822',
destination = 'University of Hawaii at Manoa',
mode = c("driving", "transit", "walking", "bicycling")[2],
departure_time = as.POSIXct.Date(
x = '2019/10/28 14:00:00',
format = "%Y-%m-%d %H:%M:%OS"
),
alternatives = FALSE,
avoid = NULL, region = NULL, key = NULL, quiet = FALSE)
as.POSIXct.Date(strptime(
x = '2019-10-28 14:00:00',
format = "%Y-%m-%d %H:%M:%OS"
)
)
mp_directions('1400 Pensacola Street Honolulu Hawaii 96822',
destination = 'University of Hawaii at Manoa',
mode = c("driving", "transit", "walking", "bicycling")[2],
departure_time = as.POSIXct.Date(strptime(
x = '2019-10-28 14:00:00',
format = "%Y-%m-%d %H:%M:%S"
)),
alternatives = FALSE,
avoid = NULL, region = NULL, key = NULL, quiet = FALSE)
as.POSIXct.Date(strptime(
x = '2019-10-28 14:00:00',
format = "%Y-%m-%d %H:%M:%S"
))
as.POSIXct.Date(strptime(
x = "2019-10-28 14:00:00",
format = "%Y-%m-%d %H:%M:%S"
))
as.POSIXct(strptime(
x = "2019-10-28 14:00:00",
format = "%Y-%m-%d %H:%M:%S"
))
mp_directions('1400 Pensacola Street Honolulu Hawaii 96822',
destination = 'University of Hawaii at Manoa',
mode = c("driving", "transit", "walking", "bicycling")[2],
departure_time = as.POSIXct(strptime(
x = "2019-10-28 14:00:00",
format = "%Y-%m-%d %H:%M:%S"
)),
alternatives = FALSE,
avoid = NULL, region = NULL, quiet = FALSE)
mp_directions('1400 Pensacola Street Honolulu Hawaii 96822',
destination = 'University of Hawaii at Manoa',
mode = c("driving", "transit", "walking", "bicycling")[2],
departure_time = as.POSIXct(strptime(
x = "2019-10-28 14:00:00",
format = "%Y-%m-%d %H:%M:%S"
)),
key = "AIzaSyDmlPyiRBkv0qZ7ZYrbsQoRQ10vGnUxM6w",
alternatives = FALSE,
avoid = NULL, region = NULL, quiet = FALSE)
?google_keys
google_keys()
google_keys()
mp_directions(
origin = c(34.81127, 31.89277),
destination = "Haifa",
alternatives = TRUE
)
get_api_key('AIzaSyDmlPyiRBkv0qZ7ZYrbsQoRQ10vGnUxM6w')
?get_api_key
google_keys <- function() getOption("googleway")
get_api_key('AIzaSyDmlPyiRBkv0qZ7ZYrbsQoRQ10vGnUxM6w')
get_api_key <- function(api) {
## try and find specific key,
## then go for the general one
api <- getOption("googleway")[['google']][[api]]
if(is.na(api)) return(get_default_key())
return(api)
}
get_api_key('AIzaSyDmlPyiRBkv0qZ7ZYrbsQoRQ10vGnUxM6w')
## Not run:
library(googleway)
google_map_directions(origin = "Google Pyrmont NSW",
destination = "QVB, Sydney", destination_place_id = "ChIJISz8NjyuEmsRFTQ9Iw7Ear8",
travel_mode = "walking")
?google_map_directions
test  =google_map_directions(origin = "Google Pyrmont NSW",
destination = "QVB, Sydney", destination_place_id = "ChIJISz8NjyuEmsRFTQ9Iw7Ear8",
travel_mode = "walking")
test
?google_directions
?set_key
set_key(key = "AIzaSyDmlPyiRBkv0qZ7ZYrbsQoRQ10vGnUxM6w")
set_key
test = set_key(key = "AIzaSyDmlPyiRBkv0qZ7ZYrbsQoRQ10vGnUxM6w")
test
getOptions('googleway')
getOption('googleway')
match.arg
?match.arg
set_key
getOption('googleway')[['google']]
library(googleway)
getOption('googleway')
?set_key
set_key(key = 'AIzaSyDmlPyiRBkv0qZ7ZYrbsQoRQ10vGnUxM6w')
getOption('googleway')
google_directions(origin = c(-37.8179746, 144.9668636),
destination = c(-37.81659, 144.9841),
mode = "walking")
?install.packages
load("~/Google Drive/VAST_Runs/VAST_output4/VAST_MS_GoA_Run.RData")
str(Save$Opt)
###########################
## Thread spatiotemporal results back together
###########################
rm(list = ls())
which_machine = c('Zack_MAC' = 1, 'Zack_PC' = 2)[1]
modelno = '6g'
results_dir = paste0(c('/Users/zackoyafuso/Documents/',
'C:/Users/Zack Oyafuso/Documents/')[which_machine],
'GitHub/MS_OM_GoA/Optimum_Allocation/', 'model_',
modelno)
setwd(results_dir)
res_files = dir(pattern = 'optimization_spatiotemporal_')
load('optimization_spatiotemporal_241-259.RData')
master_res = as.data.frame(res_df)[,1:2]
master_strata_list = list()
for(ifile in res_files){
load(ifile)
filenos = strsplit(x = gsub(gsub(ifile, pattern = 'optimization_spatiotemporal_', replacement = ''), pattern = '.RData', replacement = ''), split = '-')
filenos = sort(unlist(lapply(filenos, FUN = function(x) x[1]:x[2])))
res_df = as.data.frame(res_df)[,-1:-2]
if(length(filenos) == 1) res_df = data.frame(res_df)
names(res_df) = paste0('sol_', filenos)
master_res = cbind(master_res, res_df)
master_strata_list[filenos] = strata_list[filenos]
}
master_res = master_res[,-c(1:2)]
names(master_strata_list) = paste0('sol_', 1:length(master_strata_list))
settings = settings[(1:length(master_strata_list))[!sapply(master_strata_list, is.null)],]
master_strata_list = master_strata_list[!sapply(master_strata_list, is.null)]
res_df = master_res[,order(as.integer(gsub(names(master_res), pattern = 'sol_', replacement = '')))]
strata_list = master_strata_list
save(list = c('strata_list', 'res_df', 'settings',
'frame', 'ns', 'NTime', 'VAST_model'),
file = paste0(results_dir, '/optimization_ST_master.RData') )
###########################
## Thread spatiotemporal results back together
###########################
rm(list = ls())
rm(list = ls())
rm(list = ls())
rm(list = ls())
rm(list = ls())
###########################
## Thread spatiotemporal results back together
###########################
rm(list = ls())
which_machine = c('Zack_MAC' = 1, 'Zack_PC' = 2)[1]
modelno = '6g'
results_dir = paste0(c('/Users/zackoyafuso/Documents/',
'C:/Users/Zack Oyafuso/Documents/')[which_machine],
'GitHub/MS_OM_GoA/Optimum_Allocation/', 'model_',
modelno)
setwd(results_dir)
res_files = dir(pattern = 'optimization_spatiotemporal_')
load('optimization_spatiotemporal_241-259.RData')
master_res = as.data.frame(res_df)[,1:2]
master_strata_list = list()
for(ifile in res_files){
load(ifile)
filenos = strsplit(x = gsub(gsub(ifile, pattern = 'optimization_spatiotemporal_', replacement = ''), pattern = '.RData', replacement = ''), split = '-')
filenos = sort(unlist(lapply(filenos, FUN = function(x) x[1]:x[2])))
res_df = as.data.frame(res_df)[,-1:-2]
if(length(filenos) == 1) res_df = data.frame(res_df)
names(res_df) = paste0('sol_', filenos)
master_res = cbind(master_res, res_df)
master_strata_list[filenos] = strata_list[filenos]
}
master_res = master_res[,-c(1:2)]
names(master_strata_list) = paste0('sol_', 1:length(master_strata_list))
settings = settings[(1:length(master_strata_list))[!sapply(master_strata_list, is.null)],]
master_strata_list = master_strata_list[!sapply(master_strata_list, is.null)]
res_df = master_res[,order(as.integer(gsub(names(master_res), pattern = 'sol_', replacement = '')))]
strata_list = master_strata_list
save(list = c('strata_list', 'res_df', 'settings',
'frame', 'ns', 'NTime', 'VAST_model'),
file = paste0(results_dir, '/optimization_ST_master.RData') )
###########################
## Parameter Tuning
## Reference: http://cran.r-project.org/web/packages/segmented/index.html
############################
library(segmented)
rm(list = ls())
which_machine = c('Zack_MAC' = 1, 'Zack_PC' = 2)[1]
result_wd = paste0(c('/Users/zackoyafuso/Documents/',
'C:/Users/Zack Oyafuso/Documents/')[which_machine],
'GitHub/MS_OM_GoA/Optimum_Allocation/')
setwd(result_wd)
load('../Extrapolation_depths.RData')
VAST_model = '6g'
load(paste0('model_', VAST_model, '/optimization_ST_master.RData'))
temp_df = cbind(settings, n = sapply(strata_list, FUN = function(x) sum(x$Allocation)) )
########################
## Parameter choice
########################
perm_check = lm(n ~ as.factor(mut_change)
+ as.factor(elitism_rate)
+ nstata
+ as.factor(cv),
data = temp_df, subset = nstata %in% c(5,7,10))
summary(perm_check)
########################
## Piecewise Regression
########################
{
tiff('../figure_plot/strata_determination.tiff', res = 200,
width = 90, height = 120, units = 'mm', compression = 'lzw')
par(mfrow = c(1,1), mar = c(0,0,0,0), oma = c(3,5,1,1), family = 'serif')
plot(n ~ nstata, data = temp_df, ann = F, axes = F, type = 'n',
ylim = c(500,1100))
for(CV in c(0.15, 0.20)){
sub_df = subset(temp_df,
subset = (cv==CV) & (mut_change==0.1) & (elitism_rate==0.1))
my.lm = lm(n ~ nstata, data = sub_df)
my.seg <- segmented(my.lm,
seg.Z = ~ nstata,
psi = 13)
print(summary(my.seg))
print(slope(my.seg))
pred_stata = seq(min(temp_df$nstata), max(temp_df$nstata), length = 100)
pred_val = predict(my.seg, newdata = data.frame(nstata = pred_stata))
points(n ~ nstata, data = sub_df, pch = 16, cex = 0.5)
lines(pred_stata, pred_val, lwd = 2, col = 'darkgrey')
points(x = my.seg$psi[2],
y = predict(my.seg, newdata = data.frame(nstata = my.seg$psi[2])),
pch = 15, cex = 1, col = 'darkgrey' )
axis(side = 1, at = seq(5,20,5))
axis(side = 2, las = 1)
legend(x = 8.5, y = c('0.15'=1050, '0.2' = 650)[paste(CV)],
paste0(CV*100, '% CV Constraint'),
bty = 'n', cex = 1)
}
box()
mtext(side = 1, 'Number of Strata', outer = T, line = 2)
mtext(side = 2, 'Total Sample Size', outer = T, line = 3)
dev.off()
}
source('~/Documents/GitHub/MS_OM_GoA/Optimum_Allocation/sol_by_domain_spatiotemporal.R', echo=TRUE)
source('~/Documents/GitHub/MS_OM_GoA/Optimum_Allocation/sol_by_domain_spatiotemporal.R', echo=TRUE)
source('~/Documents/GitHub/MS_OM_GoA/Optimum_Allocation/sol_by_domain_spatiotemporal.R', echo=TRUE)
