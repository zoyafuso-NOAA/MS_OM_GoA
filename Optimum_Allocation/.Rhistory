oldpar<-radial.pie(pie1,labels=LETTERS[1:9])
pie1
load('C:/Users/Zack Oyafuso/Google Drive/EwE/HI_EwE/results.RData')
library(plotrix)
radial.pie(c(1,2,3), labels=c("One", "Two", "Three"), radlab=TRUE)
ind_ar[1,]
abs(ind_ar[1,])*100
radial.pie(abs(ind_ar[1,])*100)
abs(ind_ar[1,])*100
radial.pie(as.vector(abs(ind_ar[1,])*100))
radial.pie(c(1,2,3), labels=c("One", "Two", "Three"), radlab=TRUE)
as.vector(abs(ind_ar[1,])*100)
dimnames(ind_ar)[[2]]
radial.pie(as.vector(abs(ind_ar[1,])*100), labels = dimnames(ind_ar)[[2]] )
radial.pie(as.vector(abs(ind_ar[1,-11])*100), labels = dimnames(ind_ar)[[2]] )
ind_ar[1,-11]
radial.pie(as.vector(abs(ind_ar[1,-11])*100),
labels = dimnames(ind_ar)[[2]],
sector.colors = ifelse(ind_ar[1,-11] > 0, 'blue', 'red') )
radial.pie(as.vector(abs(ind_ar[1,-11])*100),
labels = dimnames(ind_ar)[[2]],
sector.colors = ifelse(ind_ar[1,-11] > 0, 'blue', 'red'), radial.lim = c(0,100)
)
radial.pie(as.vector(abs(ind_ar[1,-11])*100),
labels = dimnames(ind_ar)[[2]],
sector.colors = ifelse(ind_ar[1,-11] > 0, 'blue', 'red'),
radial.lim = c(0,100)
)
par(mar = c(5,5,5,5))
radial.pie(as.vector(abs(ind_ar[1,-11])*100),
labels = dimnames(ind_ar)[[2]],
sector.colors = ifelse(ind_ar[1,-11] > 0, 'blue', 'red'),
radial.lim = c(0,100)
)
radial.pie(as.vector(abs(ind_ar[1,-11])*100),
labels = dimnames(ind_ar)[[2]][-11],
sector.colors = ifelse(ind_ar[1,-11] > 0, 'blue', 'red'),
radial.lim = c(0,100)
)
par(oma= c(5,5,5,5))
radial.pie(as.vector(abs(ind_ar[1,-11])*100),
labels = dimnames(ind_ar)[[2]][-11],
sector.colors = ifelse(ind_ar[1,-11] > 0, 'blue', 'red'),
radial.lim = c(0,100)
)
radial.pie(as.vector(abs(ind_ar[1,-11])*100),
labels = dimnames(ind_ar)[[2]][-11],
sector.colors = ifelse(ind_ar[1,-11] > 0, 'blue', 'red'),
radial.lim = c(0,100), xpd = NA
)
i = 1
i = 2
par(oma= c(5,5,5,5))
radial.pie(as.vector(abs(ind_ar[i,-11])*100),
labels = dimnames(ind_ar)[[2]][-11],
sector.colors = ifelse(ind_ar[i,-11] > 0, 'blue', 'red'),
radial.lim = c(0,100)
)
i = 2
par(oma= c(1,1,1,1))
radial.pie(as.vector(abs(ind_ar[i,-11])*100),
labels = dimnames(ind_ar)[[2]][-11],
sector.colors = ifelse(ind_ar[i,-11] > 0, 'blue', 'red'),
radial.lim = c(0,100)
)
nrow(ind_ar)
for(i in 1:nrow(ind_ar)){
par(oma= c(1,1,1,1))
radial.pie(as.vector(abs(ind_ar[i,-11])*100),
labels = dimnames(ind_ar)[[2]][-11],
sector.colors = ifelse(ind_ar[i,-11] > 0, 'blue', 'red'),
radial.lim = c(0,100),
)
}
for(i in 1:nrow(ind_ar)){
par(oma= c(1,1,1,1))
radial.pie(as.vector(abs(ind_ar[i,-11])*100),
labels = dimnames(ind_ar)[[2]][-11],
sector.colors = ifelse(ind_ar[i,-11] > 0, 'blue', 'red'),
radial.lim = c(0,100),
)
}
par(oma= c(2,2,2,2))
radial.pie(as.vector(abs(ind_ar[i,-11])*100),
labels = dimnames(ind_ar)[[2]][-11],
sector.colors = ifelse(ind_ar[i,-11] > 0, 'blue', 'red'),
radial.lim = c(0,100),
)
par(oma= c(5,5,5,5))
radial.pie(as.vector(abs(ind_ar[i,-11])*100),
labels = dimnames(ind_ar)[[2]][-11],
sector.colors = ifelse(ind_ar[i,-11] > 0, 'blue', 'red'),
radial.lim = c(0,100),
)
for(i in 1:nrow(ind_ar)){
radial.pie(as.vector(abs(ind_ar[i,-11])*100),
labels = dimnames(ind_ar)[[2]][-11],
sector.colors = ifelse(ind_ar[i,-11] > 0, 'blue', 'red'),
radial.lim = c(0,100),
)
}
for(i in 1:nrow(ind_ar)){
radial.pie(as.vector(abs(ind_ar[i,-11])*100),
labels = dimnames(ind_ar)[[2]][-11],
sector.colors = ifelse(ind_ar[i,-11] > 0, 'blue', 'red'),
radial.lim = c(0,100), mar = c(5,5,5,5)
)
}
for(i in 1:nrow(ind_ar)){
radial.pie(as.vector(abs(ind_ar[i,-11])*100),
labels = dimnames(ind_ar)[[2]][-11],
sector.colors = ifelse(ind_ar[i,-11] > 0, 'blue', 'red'),
radial.lim = c(0,100), mar = c(1,1,1,1))
}
for(i in 1:nrow(ind_ar)){
radial.pie(as.vector(abs(ind_ar[i,-11])*100),
labels = dimnames(ind_ar)[[2]][-11],
sector.colors = ifelse(ind_ar[i,-11] > 0, 'blue', 'red'),
radial.lim = c(0,100), mar = c(0,0,0,0))
}
for(i in 1:nrow(ind_ar)){
radial.pie(as.vector(abs(ind_ar[i,-11])*100),
labels = dimnames(ind_ar)[[2]][-11],
sector.colors = ifelse(ind_ar[i,-11] > 0, 'blue', 'red'),
radial.lim = c(0,100), mar = c(10,10,10,10))
}
for(i in 1:nrow(ind_ar)){
radial.pie(as.vector(abs(ind_ar[i,-11])*100),
labels = dimnames(ind_ar)[[2]][-11],
sector.colors = ifelse(ind_ar[i,-11] > 0, 'blue', 'red'),
radial.lim = c(0,100), mar = c(20,20,20,20))
}
radial.pie(as.vector(abs(ind_ar[i,-11])*100),
labels = dimnames(ind_ar)[[2]][-11],
sector.colors = ifelse(ind_ar[i,-11] > 0, 'blue', 'red'),
radial.lim = c(0,100), mar = rep(15,4))
radial.pie(as.vector(abs(ind_ar[i,-11])*100),
labels = dimnames(ind_ar)[[2]][-11],
sector.colors = ifelse(ind_ar[i,-11] > 0, 'blue', 'red'),
radial.lim = c(0,100), mar = rep(12,4))
radial.pie(as.vector(abs(ind_ar[i,-11])*100),
labels = dimnames(ind_ar)[[2]][-11],
sector.colors = ifelse(ind_ar[i,-11] > 0, 'blue', 'red'),
radial.lim = c(0,100), mar = rep(11,4))
radial.pie(as.vector(abs(ind_ar[i,-11])*100),
labels = dimnames(ind_ar)[[2]][-11],
sector.colors = ifelse(ind_ar[i,-11] > 0, 'blue', 'red'),
radial.lim = c(0,100), mar = rep(10,4))
for(i in 1:nrow(ind_ar)){
radial.pie(as.vector(abs(ind_ar[i,-11])*100),
labels = dimnames(ind_ar)[[2]][-11],
sector.colors = ifelse(ind_ar[i,-11] > 0, 'blue', 'red'),
radial.lim = c(0,100), mar = rep(10,4))
}
ind_ar
load("C:/Users/Zack Oyafuso/Documents/GitHub/MS_OM_GoA/VAST_output3/VAST_MS_GoA_Run.RData")
Save$Spp
Save$Opt$Convergence_check
###############################
## Spatial Settings for VAST
###############################
rm(list = ls())
library(VAST)
install.packages("devtools")
library("devtools")
install.packages('processx')
library("devtools")
install_github("james-thorson/VAST", INSTALL_opts="--no-staged-install")
install.packages('digest')
install.packages("digest")
install_github("james-thorson/VAST", INSTALL_opts="--no-staged-install")
library("devtools")
install_github("james-thorson/VAST", INSTALL_opts="--no-staged-install")
install_github("james-thorson/VAST", INSTALL_opts="--no-staged-install")
install_github("james-thorson/VAST", INSTALL_opts="--no-staged-install")
library(devtools)
install.packages('fs')
library(devtools)
install.packages("TMB")
install.packages("INLA", repos=c(getOption("repos"), INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE)
install.github("james-thorson/FishStatsUtils", INSTALL_opts="--no-staged-install")
library(devtools)
install.github("james-thorson/FishStatsUtils", INSTALL_opts="--no-staged-install")
install_github("james-thorson/FishStatsUtils", INSTALL_opts="--no-staged-install")
install.packages('glue')
install.packages("glue")
library(devtools)
install.github("james-thorson/FishStatsUtils", INSTALL_opts="--no-staged-install")
install_github("james-thorson/FishStatsUtils", INSTALL_opts="--no-staged-install")
install.packages('ps')
install.packages("ps")
library(devtools)
install_github("james-thorson/FishStatsUtils", INSTALL_opts="--no-staged-install")
install.packages("devtools") # if you have not installed "devtools" package
devtools::install_github("hoxo-m/githubinstall")
devtools::install_github("hoxo-m/githubinstall")
install.packages("githubinstall")
library(githubinstall)
githubinstall("FishStatsUtils")
install.packages(c("BH", "broom", "Cairo", "caTools", "coda", "crul", "daymetr", "dbplyr", "doParallel", "dplyr", "expm", "forcats", "geonames", "glmmTMB", "haven", "hoardr", "httpuv", "igraph", "imager", "isdparser", "later", "lme4", "mcmc", "MCMCpack", "modelr", "MODISTools", "mvtnorm", "ncdf4", "openair", "PBSmapping", "permute", "polynom", "purrr", "quantreg", "R6", "RandomFields", "RandomFieldsUtils", "raster", "Rcpp", "RcppEigen", "RCurl", "readr", "readxl", "reshape", "rgdal", "rgeos", "rgl", "rjags", "rlang", "rmarkdown", "rnoaa", "rstudioapi", "rvest", "shiny", "slam", "sn", "spam", "spData", "spdep", "stringi", "stringr", "testthat", "tibble", "tidyr", "tidyselect", "tinytex", "urltools", "vegan", "webshot", "xfun", "XML", "xtable", "zip", "zoo"))
library(TMB)
library(devtools)
install.packages('Matrix')
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
library(TMB)
install.packages('TMB', type = 'source')
install.packages("TMB", type = "source")
library(TMB)
library(INLA)
install.packages("INLA", repos=c(getOption("repos"), INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE)
install.github("james-thorson/FishStatsUtils", INSTALL_opts="--no-staged-install")
install_github("james-thorson/FishStatsUtils", INSTALL_opts="--no-staged-install")
library(devtools)
install.github("james-thorson/FishStatsUtils", INSTALL_opts="--no-staged-install")
install_github("james-thorson/FishStatsUtils", INSTALL_opts="--no-staged-install")
library(FishStatsUtils)
install_github("james-thorson/FishStatsUtils", INSTALL_opts="--no-staged-install")
version()
Version()
version
library(devtools)
install_github("james-thorson/FishStatsUtils", INSTALL_opts="--no-staged-install")
install_github("james-thorson/VAST", INSTALL_opts="--no-staged-install")
version
install.packages(c("BH", "bit", "broom", "callr", "caTools", "checkmate", "cli", "data.table", "deldir", "Deriv", "DiagrammeR", "dplyr", "DT", "fansi", "farver", "fields", "fmsb", "foreach", "foreign", "ggridges", "gh", "gstat", "hexbin", "Hmisc", "hms", "jsonlite", "knitr", "latticeExtra", "loo", "mapproj", "mime", "mixtools", "mnormt", "mvtnorm", "prettyunits", "processx", "quantreg", "RandomFields", "raster", "RCurl", "RJSONIO", "rlang", "rmarkdown", "rsconnect", "rstan", "rstudioapi", "segmented", "sf", "shinyjs", "slam", "sn", "spacetime", "spam", "SparseM", "spData", "StanHeaders", "stringi", "threejs", "tidyr", "tidyselect", "tinytex", "TMB", "vctrs", "visNetwork", "xfun", "XML", "xts", "yaml", "zoo"))
library(TMB)
library(devtools)
install.packages("INLA", repos=c(getOption("repos"), INLA="https://inla.r-inla-download.org/R/stable"), dep=TRUE)
install_github("james-thorson/FishStatsUtils", INSTALL_opts="--no-staged-install")
library(INLA
)
library(INLA)
library(INLA)
library(devtools)
install.packages('digest')
library(devtools)
install.packages("automap")
library(devtools)
devtools::install_local('C:/Users/Zack Oyafuso/Downloads/SamplingStrata-master/', upgrade = 'never', depen)
devtools::install_local('C:/Users/Zack Oyafuso/Downloads/SamplingStrata-master/', upgrade = 'never', dependencies = F)
?buildFrame
# devtools::install_local('C:/Users/Zack Oyafuso/Downloads/SamplingStrata-master/', upgrade = 'never', dependencies = F)
library(SamplingStrata)
?buildFrame
?buildFrameSpatial
?optimizeStrataSpatial
# devtools::install_local('C:/Users/Zack Oyafuso/Downloads/SamplingStrata-master/', upgrade = 'never', dependencies = F)
library(SamplingStrata)
#############################
# Example of "spatial" method
#############################
library(sp)
# library(devtools)
# devtools::install_local('C:/Users/Zack Oyafuso/Downloads/SamplingStrata-master/', upgrade = 'never', dependencies = F)
library(SamplingStrata)
library(sp)
data("meuse")
data("meuse.grid")
meuse.grid$id <- c(1:nrow(meuse.grid))
coordinates(meuse) <- c('x','y')
coordinates(meuse.grid) <- c('x','y')
library(gstat)
library(automap)
meuse.grid$id <- c(1:nrow(meuse.grid))
coordinates(meuse) <- c('x','y')
coordinates(meuse.grid) <- c('x','y')
v <- variogram(lead ~ dist + soil, data = meuse)
fit.vgm.lead <- autofitVariogram(lead ~ dist + soil,
meuse,
model = "Exp")
plot(v, fit.vgm.lead$var_model)
lead.kr <- krige(lead ~ dist + soil, meuse, meuse.grid,
model = fit.vgm.lead$var_model)
lead.pred <- ifelse(lead.kr[1]$var1.pred < 0,0, lead.kr[1]$var1.pred)
lead.var <- ifelse(lead.kr[2]$var1.var < 0, 0, lead.kr[2]$var1.var)
df <- as.data.frame(list(dom = rep(1,nrow(meuse.grid)),
lead.pred = lead.pred,
lead.var = lead.var,
lon = meuse.grid$x,
lat = meuse.grid$y,
id = c(1:nrow(meuse.grid))))
head(df)
str(df)
frame <-buildFrameSpatial(df = df,
id = "id",
X = c("lead.pred"),
Y = c("lead.pred"),
variance = c("lead.var"),
lon = "lon",
lat = "lat",
domainvalue = "dom")
cv <- as.data.frame(list(DOM = rep("DOM1",1),
CV1 = rep(0.05,1),
domainvalue = c(1:1) ))
str(frame)
meuse.grid$id <- c(1:nrow(meuse.grid))
coordinates(meuse)<-c("x","y")
coordinates(meuse.grid)<-c("x","y")
lm_lead <- lm(log(lead) ~ dist,data=meuse)
# summary(lm_lead)
lm_zinc <- lm(log(zinc) ~ dist,data=meuse)
# summary(lm_zinc)
kriging_lead = autoKrige(log(lead) ~ dist, meuse, meuse.grid)
kriging_lead = autoKrige(log(lead) ~ dist, meuse, meuse.grid)
kriging_zinc = autoKrige(log(zinc) ~ dist, meuse, meuse.grid)
df <- NULL
df$id <- meuse.grid$id
df$lead.pred <- kriging_lead$krige_output@data$var1.pred
df$lead.var <- kriging_lead$krige_output@data$var1.var
df$zinc.pred <- kriging_zinc$krige_output@data$var1.pred
df$zinc.var <- kriging_zinc$krige_output@data$var1.var
df$lon <- meuse.grid$x
df$lat <- meuse.grid$y
df$dom1 <- 1
df <- as.data.frame(df)
head(df)
library(SamplingStrata)
frame <- buildFrameSpatial(df=df,
id="id",
X=c("lead.pred","zinc.pred"),
Y=c("lead.pred","zinc.pred"),
variance=c("lead.var","zinc.var"),
lon="lon",
lat="lat",
domainvalue = "dom1")
cv <- as.data.frame(list(DOM=rep("DOM1",1),
CV1=rep(0.01,1),
CV2=rep(0.01,1),
domainvalue=c(1:1) ))
set.seed(1234)
solution <- optimStrata (
method = "spatial",
errors=cv,
framesamp=frame,
iter = 15,
pops = 10,
nStrata = 5,
fitting = c(summary(lm_lead)$r.square,summary(lm_zinc)$r.square),
range = c(kriging_lead$var_model$range[2],kriging_zinc$var_model$range[2]),
kappa=1,
writeFiles = FALSE,
showPlot = FALSE,
parallel = FALSE)
framenew <- solution$framenew
outstrata <- solution$aggr_strata
head(framenew)
str(framenew)
str(outstrata)
#Plot resuts
frameres <- SpatialPointsDataFrame(data=framenew, coords=cbind(framenew$LON,framenew$LAT) )
frameres2 <- SpatialPixelsDataFrame(points=frameres[c("LON","LAT")], data=framenew)
frameres2$LABEL <- as.factor(frameres2$LABEL)
spplot(frameres2,c("LABEL"), col.regions=bpy.colors(5))
#Select Sample
s <- selectSample(framenew,outstrata,writeFiles=FALSE)
s
optimStrata
library(SamplingStrata)
optimStrata
optimizeStrataSpatial
optimizeStrataSpatial
optimStrata
optimStrata
optimizeStrataSpatial
strataGenalgSpatial
buildStrataDFSpatial
buildStrataDFSpatial
library(SpatialStrata)
library(SamplingStrata)
optimStrata
optimizeStrataSpatial
strataGenalgSpatial
strataGenalgSpatial
library(SamplingStrata)
?rbgaSpatial
library(rnaturalearth)
devtools::install_github("ropensci/rnaturalearth")
traceback()
plot_maps(plot_set=plot_settings$plot_num[i],
Report=Report,
TmbData = TmbData,
Sdreport=Opt$SD,
PlotDF=MapDetails_List[["PlotDF"]],
MapSizeRatio=MapDetails_List[["MapSizeRatio"]],
working_dir = paste0(DateFile, plot_settings$var_name[i], '/' ),
Year_Set=Year_Set, Years2Include=Years2Include,
col = rev(heat.colors(100)),
mar=c(0,0,2,0), oma=c(3.5,3.5,0,0), cex=1.8,
category_names=levels(Data_Geostat[,'spp']))
library(VAST); library(mvtnorm)
install.packages("rnaturalearth")
library(rnaturalearth)
traceback(0)
traceback()
library(rastser)
library(raster)
library(rnaturalearth)
env <- asNamespace("rnaturalearth")
head(getNamespaceInfo(env, "S3methods"))
env <- asNamespace("rnaturalearth'0
env <- asNamespace("rnaturalearth')
env <- asNamespace("rnaturalearth")
update.packages(ask = FALSE, checkBuilt = TRUE)
update.packages(ask = FALSE, checkBuilt = TRUE)
remove.packages("rnaturalearth", lib="~/R/win-library/3.5")
install.packages('rnaturalearth')
library(rnaturalearth)
require(rnaturalearth)
devtools::install_github("ropenscilabs/rnaturalearthdata")
install.packages("rnaturalearthhires",
repos = "http://packages.ropensci.org",
type = "source")
library(rnaturalearthdata)
library(rnaturalearth)
library(rnaturalearth)
library(rnaturalearth)
library(rnaturalearth)
library(rnaturalearth)
library(TMBhelper)
library(raster); library(RColorBrewer); library(SamplingStrata)
setwd('C:/Users/Zack Oyafuso/Documents/GitHub/MS_OM_GoA/Optimum_Allocation/')
load('../Extrapolation_depths.RData')
VAST_model = '6d'
load(paste0('model_', VAST_model, '/optimization.RData'))
head(res_df)
head(strata_list)
sample_sizes = lapply(strata_list, FUN = function(x) sum(x$Allocation))
sample_sizes
sample_sizes = sapply(strata_list, FUN = function(x) sum(x$Allocation))
sample_sizes
winner = which.min(sample_sizes)
winner
ns = 15
goa = SpatialPointsDataFrame(coords = Extrapolation_depths[,c('E_km', 'N_km')],
data = cbind(solution$framenew[,paste0('Y',1:ns)],
X1 = solution$indices$X1) )
str(res_df)
goa = SpatialPointsDataFrame(coords = Extrapolation_depths[,c('E_km', 'N_km')],
data = cbind(X1 = res_df[,-c(1:2)][,winner] ) )
winner
res_df = as.data.frame(res_df)
sample_sizes = sapply(strata_list, FUN = function(x) sum(x$Allocation))
winner = which.min(sample_sizes)
ns = 15
goa = SpatialPointsDataFrame(coords = Extrapolation_depths[,c('E_km', 'N_km')],
data = cbind(X1 = res_df[,-c(1:2)][,winner] ) )
str(res_df)
goa = SpatialPointsDataFrame(coords = Extrapolation_depths[,c('E_km', 'N_km')],
data = data.frame(X1 = res_df[,-c(1:2)][,winner] ) )
goa
# goa = SpatialPoints(coords = Extrapolation_depths[,c('E_km', 'N_km')] )
goa_ras = raster(goa, resolution = 5)
goa_ras =rasterize(x = goa, y = goa_ras, field = 'X1')
par(mar = c(0,0,0,0))
nstrata = nrow(strataStructure)
plot(goa_ras, col = brewer.pal(n = nstrata, name= 'Paired'), legend = T )
strata_list[[winner]]
expected_CV(strata_list[[winner]])
sum(strata_list[[winner]])
sum(strata_list[[winner]]$Allocation)
plot(goa_ras, legend = T )
plot(goa_ras, legend = F, col = 'white')
idom = 1
goa = SpatialPointsDataFrame(coords = Extrapolation_depths[,c('E_km', 'N_km')],
data = data.frame(
id = res_df$id,
domainvalue = res_df$domainvalue,
X1 = res_df[,-c(1:2)][,winner] ) )
# goa = SpatialPoints(coords = Extrapolation_depths[,c('E_km', 'N_km')] )
goa_ras = raster(goa, resolution = 5)
goa_ras =rasterize(x = goa, y = goa_ras, field = 'X1')
par(mar = c(0,0,0,0))
idom = 1
plot(subset(goa, domainvalue == idom))
plot(goa_ras, legend = F, col = 'white')
plot(subset(goa, domainvalue == idom), add = T, col = 'blue')
head(subset(goa, domainvalue == idom))
table(subset(goa, domainvalue == idom)$X1)
sub_goa = subset(goa, domainvalue == idom)
nstrata = length(unique(sub_goa$X1))
nstrata
plot(sub_goa, add = T, col = 'blue')
ncols = brewer.pal(n = nstrata, name = 'Spectral')
plot(sub_goa, add = T, col = ncols)
switch('blue' = 1)
switch('blue' = 1)(1)
switch('blue' = 1)('blue')
?switch
ncols = brewer.pal(n = nstrata, name = 'Spectral')
ncols
par(mar = c(0,0,0,0))
nstrata = nrow(strata_list[[winner]])
plot(goa_ras, legend = F, col = 'white')
idom = 1
sub_goa = subset(goa, domainvalue == idom)
nstrata = length(unique(sub_goa$X1))
ncols = brewer.pal(n = nstrata, name = 'Spectral')
plot(sub_goa, add = T, col = ncols[sub_goa$X1] )
sum(strata_list[[winner]]$Allocation)
plot(goa_ras, legend = F, col = 'black')
idom = 1
sub_goa = subset(goa, domainvalue == idom)
nstrata = length(unique(sub_goa$X1))
ncols = brewer.pal(n = nstrata, name = 'Spectral')
plot(sub_goa, add = T, col = ncols[sub_goa$X1] )
plot(goa_ras, legend = F, col = 'black')
plot(goa_ras[goa_ras$domainvalue == idom], add = T, col = ncols[sub_goa$X1] )
goa_ras[goa_ras$domainvalue == idom,]
goa_ras@data
